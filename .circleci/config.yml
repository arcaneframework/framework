version: 2.1

executors:
  # 4 CPU - 8Go RAM - 20c/min
  amd64:
    resource_class: large
    working_directory: ~/workspace

  # 4 CPU - 16Go RAM - 26c/min
  arm64:
    resource_class: arm.large
    working_directory: ~/workspace


# Les variables d'environnement.
parameters:
  SOURCE_DIR:
    type: string
    default: "~/workspace"

  BUILD_DIR:
    type: string
    default: "~/workspace/build"

  INSTALL_DIR:
    type: string
    default: "~/workspace/install"

  CC_DIR:
    type: string
    default: "~/workspace/ccache"

  CT_RESULT_DIR:
    type: string
    default: "~/workspace/test"


# Les jobs.
jobs:
  build-and-test:
    parameters:
      arch:
        type: string
        default: amd64
      image_version:
        type: string
        default: minimal
      exec_type:
        type: string
        default: normal
      type_build:
        type: string
        default: Check

    executor: <<parameters.arch>>
    docker:
      - image: ghcr.io/arcaneframework/ubuntu-2404:gcc-14_<<parameters.image_version>>_20240717

    steps:
      - when:
          condition:
            equal: [ quick, <<parameters.exec_type>> ]
          steps:
            - run:
                name: (Quick) Set specific variables
                command: |
                  echo 'export CT_REGEX="^.*(mpithread|proc|thread|hybrid4).*$"' >> $BASH_ENV
                  echo 'export CT_OPTS="-j 4 --repeat until-pass:10 --timeout 60 --output-on-failure"' >> $BASH_ENV

      - when:
          condition:
            equal: [ normal, <<parameters.exec_type>> ]
          steps:
            - run:
                name: (Normal) Set specific variables
                command: |
                  echo 'export CT_REGEX="^.*(mpithread|[5-9]proc|[1-9][0-9]+proc|[9-9]thread|[1-9][0-9]+thread).*$"' >> $BASH_ENV
                  echo 'export CT_OPTS="--timeout 300 --output-on-failure"' >> $BASH_ENV

      - when:
          condition:
            equal: [ arm64, <<parameters.arch>> ]
          steps:
            - run:
                name: (ARM64) Set specific variables
                command: |
                  echo 'export CT_REGEX="${CT_REGEX}|^utils1$|^hydro5_papi_backtrace$|^.*(mpithread|[3-9]proc|[1-9][0-9]+proc|[5-9]thread|[1-9][0-9]+thread).*$"' >> $BASH_ENV

      - run:
          name: "Compute build type"
          command: |
            if [[ "<<parameters.type_build>>" == "Check" ]]; then
              CMAKE_BUILD_TYPE="Release"
            else
              CMAKE_BUILD_TYPE="<<parameters.type_build>>"
            fi
            echo 'export ACTION_CMAKE_ADD_ARGS="${ACTION_CMAKE_ADD_ARGS} \
            -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
            -DARCCORE_BUILD_MODE=<<parameters.type_build>> \
            -DARCANE_BUILD_TYPE=<<parameters.type_build>> \
            "' >> $BASH_ENV

      - run:
          name: "Set C++ compiler and default MPI"
          command: |
            source /root/scripts/use_openmpi.sh
            source /root/scripts/use_gcc-14.sh

      - run:
          name: Display set variables
          command: |
            echo "CT_REGEX = $CT_REGEX"
            echo "CT_OPTS = $CT_OPTS"

      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule update --init

      - restore_cache:
          keys: 
            - <<parameters.arch>>-arcane-<<parameters.type_build>>-

      - run:
          name: Create ccache directory and ccache environment variables
          command: |
            echo 'export CCACHE_COMPRESS=true' >> $BASH_ENV
            echo 'export CCACHE_COMPRESSLEVEL=6' >> $BASH_ENV
            echo 'export CCACHE_DIR=<<pipeline.parameters.CC_DIR>>' >> $BASH_ENV
            echo 'export CCACHE_MAXSIZE=500M' >> $BASH_ENV
            mkdir -p <<pipeline.parameters.CC_DIR>>

      - run:
          name: Configure 'framework'
          command: |
            cmake \
            -S <<pipeline.parameters.SOURCE_DIR>> \
            -B <<pipeline.parameters.BUILD_DIR>> \
            -GNinja \
            -DCMAKE_CXX_FLAGS_RELEASE="-O2" \
            -DCMAKE_VERBOSE_MAKEFILE=TRUE \
            -DCMAKE_DISABLE_FIND_PACKAGE_Papi=TRUE \
            -DBUILD_SHARED_LIBS=TRUE \
            -DARCANE_DEFAULT_PARTITIONER=Metis \
            -DARCANE_DISABLE_PERFCOUNTER_TESTS=ON \
            -DARCCON_REGISTER_PACKAGE_VERSION=2 \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ \
            ${ACTION_CMAKE_ADD_ARGS}

      - run:
          name: Build 'framework'
          command: cmake --build <<pipeline.parameters.BUILD_DIR>> -- -j4

      - run:
          name: Install 'framework'
          command: cmake --install <<pipeline.parameters.BUILD_DIR>>

      - run:
          name: Get 'ccache' status
          command: |
            ccache -s

      - save_cache:
          key: <<parameters.arch>>-arcane-<<parameters.type_build>>-{{ .BuildNum }}
          paths:
            - ~/workspace/ccache

      - run:
          name: Configure 'samples'
          command: cmake --build <<pipeline.parameters.BUILD_DIR>> --target samples_configure

      - run:
          name: Build 'samples'
          command: cmake --build <<pipeline.parameters.BUILD_DIR>> --target samples_build

      - run:
          name: Force execution of MPI in root session
          command: |
            echo 'export OMPI_ALLOW_RUN_AS_ROOT=1' >> $BASH_ENV
            echo 'export OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1' >> $BASH_ENV

      # On ne lance pas les tests qui utilisent 'mpithread' car ils ont besoin de 12 coeurs
      # sur les machines à 4 coeurs cela pose problème.
      - run:
          name: Test 'framework'
          command: |
            mkdir -p <<pipeline.parameters.CT_RESULT_DIR>>
            ctest --test-dir <<pipeline.parameters.BUILD_DIR>> --output-junit <<pipeline.parameters.CT_RESULT_DIR>>/results.xml ${CT_OPTS} -E "${CT_REGEX}"

      # https://www.ibm.com/docs/en/developer-for-zos/9.1.1?topic=formats-junit-xml-format
      - run:
          name: Edit results.xml for CircleCI UI (need valid JUnit XML)
          when: always
          command: |
            RESULT_ORI=<<pipeline.parameters.CT_RESULT_DIR>>/results.xml
            RESULT_TMP=<<pipeline.parameters.CT_RESULT_DIR>>/results_ori.xml
            mv $RESULT_ORI $RESULT_TMP
            sed -e '/<testcase.*>/,/<\/testcase>/d' -e 's:</testsuite>::' -e 's/(empty)/CTest Arcane/' -e 's/hostname=""/hostname="CircleCI"/' $RESULT_TMP > $RESULT_ORI
            sed -n '/<testcase.*status="fail">/,/<\/testcase>/p' $RESULT_TMP | sed -e 's:<failure message="".*/>::M' -e 's/<system-out>/<failure message="Logs Arcane:">\n/M' -e 's:</system-out>:</failure>:M' >> $RESULT_ORI
            sed -n '/<testcase.*status="run">/,/<\/testcase>/p' $RESULT_TMP >> $RESULT_ORI
            echo '</testsuite>' >> $RESULT_ORI
            rm $RESULT_TMP

      - store_artifacts:
          path: <<pipeline.parameters.CT_RESULT_DIR>>

      - store_test_results:
          path: <<pipeline.parameters.CT_RESULT_DIR>>

workflows:
  # WF exécuté si push dans main ou dans
  # une branche ayant le format suivant :
  # dev/{initial}-highci-{nomdelabranche}
  # Exemples :
  # dev/gg-highci-truc
  # dev/ah-highci-truc
  # &c
  push-in-main-or-highci:
    jobs:
      - build-and-test:
          filters:
            branches:
              only: 
                - main
                - /dev\/[a-z]+-highci-.*/
          matrix:
            parameters:
              arch: [arm64, amd64]
              image_version: [full]
              exec_type: [normal]
              type_build: [Check]

  # WF exécuté à chaque push.
  every-push:
    jobs:
      - build-and-test:
          matrix:
            parameters:
              arch: [arm64, amd64]
              image_version: [minimal]
              exec_type: [quick]
              type_build: [Check]

  # WFs exécutés tous les jours.
  every-day:
    triggers: #use the triggers key to indicate a scheduled build
      - schedule:
          cron: "23 1 * * *" # Tous les jours à 01:23 (du matin).
          filters:
            branches:
              only:
                - main
    jobs:
      - build-and-test:
          matrix:
            parameters:
              arch: [arm64, amd64]
              image_version: [minimal, full]
              exec_type: [normal]
              type_build: [Check]
