// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace GeometricGeneration {
    using System;
    
    
    public partial class GeneratedGeomShapeView : GeneratedGeomShapeViewBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            
            this.Write("/*\n * Génération des classes des vues spécifiques des GeomShapeView.\n */\n");
            
            
            
            
            
 foreach( Item item in Connectivity.Items2DAnd3D ) { 
            
            
            
            
            
            this.Write("/*!\n * \\ingroup ArcaneGeometric\n * \\brief Vue spécifique sur les formes géométriques de type GeomType::");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            
            
            
            
            this.Write(".\n */\nclass ARCANE_CEA_GEOMETRIC_EXPORT ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            
            
            
            
            this.Write("ShapeView\n: public GeomShape");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Dimension));
            
            
            
            
            
            this.Write("DView\n{\n public: \n  \n  typedef ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BasicName));
            
            
            
            
            
            this.Write("ElementConstView ElementConstView;\n  typedef ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BasicName));
            
            
            
            
            
            this.Write("ElementView ElementView;\n  typedef ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BasicName));
            
            
            
            
            
            this.Write("Element ElementType;\n  typedef ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.SVCBasicName));
            
            
            
            
            
            this.Write("Element SVCElement;\n  typedef ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.SVCBasicName));
            
            
            
            
            
            this.Write("ElementView SVCElementView;\n\n public:\n\n  ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            
            
            
            
            this.Write("ShapeView() {}\n  explicit ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            
            
            
            
            this.Write("ShapeView(const GeomShapeView& rhs)\n  : GeomShape");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Dimension));
            
            
            
            
            
            this.Write("DView(rhs)\n  {\n    ARCANE_GEOMETRIC_CHECKTYPE(rhs.geomType(),GeomType::");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            
            
            
            
            this.Write(");\n  }\n\n  //! Nombre de noeuds de la forme (retourne \\a ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.NbNode));
            
            
            
            
            
            this.Write(")\n  static Integer nbNode() { return ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.NbNode));
            
            
            
            
            
            this.Write("; }\n  //! Type de la forme (retourne \\a GeomType::");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Type));
            
            
            
            
            
            this.Write(" )\n  static GeomType geomType() { return GeomType::");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Type));
            
            
            
            
            
            this.Write("; }\n  //! Remplit \\a svc avec les valeurs du \\a i-ème sous-volume de controle.\n  void fillSVC(");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.SVCBasicName));
            
            
            
            
            
            this.Write("ElementView svc, Integer i) { fillSubZone");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BasicName));
            
            
            
            
            
            this.Write("(svc,i); }\n\n  //! Opérateur de conversion vers une vue constante sur l'élément géométrique\n  operator ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            
            
            
            
            this.Write("ElementConstView () const { return ElementConstView(_nodeView()); }\n  //! Vue constante sur l'élément géométrique\n  ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            
            
            
            
            this.Write("ElementConstView elemView() const { return ElementConstView(_nodeView()); }\n};\n");
            
            
            
            
            
 // Génère un typedef s'il existe un nom court 
            
            
            
            
            
 if (item.BasicName != item.Name ) { 
            
            
            
            
            
            this.Write("typedef ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            
            
            
            
            this.Write("ShapeView ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.BasicName));
            
            
            
            
            
            this.Write("ShapeView;\n");
            
            
            
            
            
 } 
            
            
            
            
            
            this.Write("\n");
            
            
            
            
            
 } 
            
            
            
            
            
            this.Write("\n/*!\n * \\name Conversion vers une vue sur une forme géométrique spécifique.\n *\n * Ces méthodes permettent de convertir l'instance en une vue spécifique à un type donné.\n * Le type géométrique (geomType()) de l'instance doit correspondre.\n */\n//@{\n");
            
            
            
            
            
 foreach( Item item in Connectivity.Items2DAnd3D ) { 
            
            
            
            
            
            this.Write("inline ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            
            
            
            
            this.Write("ShapeView GeomShapeView::\nto");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            
            
            
            
            this.Write("Shape() const\n{\n  return ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            
            
            
            
            this.Write("ShapeView(*this);\n}\n");
            
            
            
            
            
 } 
            
            
            
            
            
            this.Write("//@}\n\n/*!\n * \\name Conversion vers une vue sur un élément géométrique spécifique.\n *\n * Ces méthodes permettent de convertir l'instance en une vue spécifique à un type donné.\n * Le type géométrique (geomType()) de l'instance doit correspondre.\n */\n//@{\n");
            
            
            
            
            
 foreach( Item item in Connectivity.Items2DAnd3D ) { 
            
            
            
            
            
            this.Write("inline ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            
            
            
            
            this.Write("ElementConstView GeomShapeView::\nto");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            
            
            
            
            this.Write("Element() const\n{\n  ARCANE_GEOMETRIC_CHECKTYPE(geomType(),GeomType::");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            
            
            
            
            this.Write(");\n  return ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            
            
            
            
            this.Write("ElementConstView(_nodeView());\n}\n");
            
            
            
            
            
 } 
            
            
            
            
            
            this.Write("//@}");
            
            
            
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class GeneratedGeomShapeViewBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
