using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace GeometricGeneration
{
  class MainClass
  {
    Encoding m_output_encoding;
    string m_base_path;

    public MainClass()
    {
      m_base_path = "../../../ceapart/src/arcane/geometric";
      m_output_encoding = Encoding.GetEncoding ("utf-8");
    }

    public void Execute ()
    {
      _Generate (new GeneratedConnectivity().TransformText (),"GeneratedConnectivity.h");
      _Generate (new GeneratedGeomShapeView ().TransformText (), "GeneratedGeomShapeView.h");
      _Generate (new GeneratedGeomElement ().TransformText (), "GeneratedGeomElement.h");
      _Generate (new GeneratedGeomElementView ().TransformText (), "GeneratedGeomElementView.h");
      _Generate (new GeneratedGeomShapeViewDeclarations().TransformText (), "GeneratedGeomShapeViewDeclarations.h");
    }

    void _Generate(string text, string filename)
    {
      //TODO: Faire en-tête indiquant qu'il s'agit d'une génération et spécifier le chemin de ce projet.
      string header = String.Format ("// WARNING: This file is generated by a tool. DO NOT EDIT.\n");
      string full_path = Path.Combine (m_base_path, filename);
      Console.WriteLine ("Generating file '{0}'", full_path);
      File.WriteAllText (full_path,header+text,m_output_encoding);
    }

    public static int Main (string[] args)
    {
      ItemTypeBuilder itb = new ItemTypeBuilder ();
      Connectivity.Create (itb);

      MainClass mc = new MainClass ();
      mc.Execute ();
      return 0;
    }

  }
}
