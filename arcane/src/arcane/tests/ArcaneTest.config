<?xml version="1.0"?>
<arcane-config code-name="ArcaneTest">

 <configuration>
  <add name="TestGlobalConfig1" value="125" />
  <add name="TestGlobalConfig3" value="0.3" />
 </configuration>

 <time-loops>
  <time-loop name="BasicLoop">
   <title>Boucle de base</title>
   <description>
     Boucle de base
   </description>

   <modules>
    <module name="ArcaneCheckpoint" need="optional" />
    <module name="ArcanePostProcessing" need="optional" />
    <module name="ArcaneLoadBalance" need="optional" />
   </modules>
  </time-loop>

  <time-loop name="EmptyLoop">
   <title>Boucle vide</title>
   <description>
     Boucle vide
   </description>

   <modules>
   </modules>
  </time-loop>

  <time-loop name="ArcaneDirectExecutionLoop">
   <title>Boucle vide avec execution directe</title>
   <description>
    Boucle vide avec execution directe.
   </description>

   <modules>
   </modules>

   <singleton-services>
     <service name="ArcaneDirectExecution" need="required" />
   </singleton-services>
  </time-loop>

  <time-loop name="ArcaneHydroLoop">
    <title>MicroHydro</title>
    <description>Boucle en temps de SimpleHydro</description>

    <modules>
      <module name="SimpleHydro" need="required" />
      <module name="ArcanePostProcessing" need="required" />
      <module name="ArcaneCheckpoint" need="required" />
      <module name="ArcaneLoadBalance" need="optional" />
      <module name="HydroAdditionalTest" need="optional" />
    </modules>

    <entry-points where="build">
      <entry-point name="SimpleHydro.SH_HydroBuild" />
    </entry-points>

    <entry-points where="init">
      <entry-point name="SimpleHydro.SH_HydroStartInit" />
      <entry-point name="SimpleHydro.SH_HydroInit" />
      <entry-point name="HydroAdditionalTest.HAT_Init" />
    </entry-points>

    <entry-points where="compute-loop">
      <entry-point name="SimpleHydro.SH_ComputeForces" />
      <entry-point name="SimpleHydro.SH_ComputeVelocity" />
      <entry-point name="SimpleHydro.SH_ComputeViscosityWork" />
      <entry-point name="SimpleHydro.SH_ApplyBoundaryCondition" />
      <entry-point name="SimpleHydro.SH_MoveNodes" />
      <entry-point name="SimpleHydro.SH_ComputeGeometricValues" />
      <entry-point name="SimpleHydro.SH_UpdateDensity" />
      <entry-point name="SimpleHydro.SH_ApplyEquationOfState" />
      <entry-point name="SimpleHydro.SH_ComputeDeltaT" />
      <entry-point name="HydroAdditionalTest.HAT_IterationEnd" />
    </entry-points>

    <entry-points where="exit">
      <entry-point name="SimpleHydro.SH_HydroExit" />
    </entry-points>
  </time-loop>

  <time-loop name="ArcaneHydroGenericLoop">
    <title>MicroHydro</title>
    <description>
      Boucle en temps de SimpleHydro générique pour les tests
      de performance
    </description>

    <modules>
      <module name="SimpleHydroGeneric" need="required" />
    </modules>

    <entry-points where="build">
      <entry-point name="SimpleHydroGeneric.SH_HydroBuild" />
    </entry-points>

    <entry-points where="init">
      <entry-point name="SimpleHydroGeneric.SH_HydroStartInit" />
      <entry-point name="SimpleHydroGeneric.SH_HydroInit" />
    </entry-points>

    <entry-points where="compute-loop">
      <entry-point name="SimpleHydroGeneric.SH_DoOneIteration" />
    </entry-points>

    <entry-points where="exit">
      <entry-point name="SimpleHydroGeneric.SH_HydroExit" />
    </entry-points>
  </time-loop>

  <time-loop name="SimpleHydroCSLoop">
    <title>SimpleHydroCS</title>
    <description>Boucle en temps de l'exemple Arcane SimpleHydro en C#</description>

    <singleton-services>
      <service name="DotNetTestSingletonCS" need="required" />
    </singleton-services>

    <modules>
      <module name="SimpleHydroCS" need="required" />
      <module name="ArcanePostProcessing" need="required" />
      <module name="ArcaneCheckpoint" need="required" />
    </modules>

    <entry-points where="init">
      <entry-point name="SimpleHydroCS.HydroStartInit" />
      <entry-point name="SimpleHydroCS.HydroContinueInit" />
    </entry-points>

    <entry-points where="compute-loop">
      <entry-point name="SimpleHydroCS.ComputePressureForce" />
      <entry-point name="SimpleHydroCS.ComputePseudoViscosity" />
      <entry-point name="SimpleHydroCS.AddPseudoViscosityContribution" />
      <entry-point name="SimpleHydroCS.ComputeVelocity" />
      <entry-point name="SimpleHydroCS.ComputeViscosityWork" />
      <entry-point name="SimpleHydroCS.ApplyBoundaryCondition" />
      <entry-point name="SimpleHydroCS.MoveNodes" />
      <entry-point name="SimpleHydroCS.ComputeGeometricValues" />
      <entry-point name="SimpleHydroCS.UpdateDensity" />
      <entry-point name="SimpleHydroCS.ApplyEquationOfState" />
      <entry-point name="SimpleHydroCS.ComputeDeltaT" />
    </entry-points>
  </time-loop>

  <time-loop name="SimplePythonCallLoop">
    <title>SimpleHydroCS</title>
    <description>Boucle en temps de test du wrapping Python</description>

    <modules>
      <module name="SimplePythonCallerModule" need="required" />
    </modules>

    <entry-points where="compute-loop">
      <entry-point name="SimplePythonCallerModule.Main1" />
    </entry-points>
    <entry-points where="exit">
      <entry-point name="SimplePythonCallerModule.OnExit" />
    </entry-points>
  </time-loop>

  <time-loop name="SubMeshTestLoop">
    <title>Boucle de base</title>
    <description>Boucle de base pour les tests de sous-maillages</description>
    <modules>
      <module name="ArcaneCheckpoint" need="required" />
      <module name="SubMeshTest" need="required" />
    </modules>

    <entry-points where="init">
      <entry-point name="SubMeshTest.Init"/>
      <entry-point name="SubMeshTest.StartInit"/>
      <entry-point name="SubMeshTest.ContinueInit"/>
    </entry-points>

    <entry-points where="compute-loop">
      <entry-point name="SubMeshTest.compute"/>
    </entry-points>
  </time-loop>

  <time-loop name="AlephTestLoop">
    <title>AlephTest</title>
    <description>Boucle de base pour les tests du module Aleph</description>
    <modules>
      <module name="AlephTest" need="required" />
      <module name="ArcanePostProcessing" need="optional" />
      <module name="ArcaneCheckpoint" need="optional" />
    </modules>
    <entry-points where="init">
      <entry-point name="AlephTest.init"/>
    </entry-points>
    <entry-points where="compute-loop">
      <entry-point name="AlephTest.compute"/>
    </entry-points>
  </time-loop>

  <time-loop name="AlephIndexTestLoop">
    <title>AlephIndexTest</title>
    <description>Boucle de base pour les tests du module Aleph+Index</description>
    <modules>
      <module name="AlephIndexTest" need="required" />
      <module name="ArcanePostProcessing" need="optional" />
      <module name="ArcaneCheckpoint" need="optional" />
    </modules>
    <entry-points where="init">
      <entry-point name="AlephIndexTest.init"/>
    </entry-points>
    <entry-points where="compute-loop">
      <entry-point name="AlephIndexTest.compute"/>
    </entry-points>
  </time-loop>

  <time-loop name="AlephMultiTestLoop">
    <title>AlephMultiTest</title>
    <description>Boucle de base pour les tests du module Aleph+Multi</description>
    <modules>
      <module name="AlephMultiTest" need="required" />
      <module name="ArcanePostProcessing" need="optional" />
      <module name="ArcaneCheckpoint" need="optional" />
    </modules>
    <entry-points where="init">
      <entry-point name="AlephMultiTest.init"/>
    </entry-points>
    <entry-points where="compute-loop">
      <entry-point name="AlephMultiTest.compute"/>
    </entry-points>
  </time-loop>

  <time-loop name="AMRTestLoop">
    <title>AMRTest</title>
    <description>Boucle de base pour les tests AMR</description>
    <modules>
      <module name="AMRTest" need="required" />
      <module name="ArcaneCheckpoint" need="optional" />
    </modules>

    <entry-points where="init">
      <entry-point name="AMRTest.Init"/>
    </entry-points>

    <entry-points where="compute-loop">
      <entry-point name="AMRTest.compute"/>
    </entry-points>
  </time-loop>
   
  <time-loop name="PartialVariableTestLoop">
    <title>Boucle de base</title>
    <description>Boucle de base pour les tests de variables partielles</description>
    <modules>
      <module name="ArcanePostProcessing" need="required" />
      <module name="ArcaneLoadBalance" need="optional" />
      <module name="PartialVariableTester" need="required" />
    </modules>
    
    <entry-points where="init">
      <entry-point name="PartialVariableTester.Init"/>
    </entry-points>
    
    <entry-points where="compute-loop">
      <entry-point name="PartialVariableTester.Compute"/>
    </entry-points>
  </time-loop>

  <time-loop name="SingletonServiceTestModuleLoop">
    <title>Boucle en temps pour tester les services singletons</title>
    <description>Boucle en temps pour tester les services singletons</description>
    <!-- Ajoute options de configuration pour test -->
    <configuration>
     <add name="TestGlobalConfig1" value="267" />
     <add name="TestGlobalConfig2" value="4.5" />
     <add name="TestGlobalConfig3" value="0.2" />
    </configuration>

    <modules>
      <module name="SingletonServiceTestModule" need="required" />
    </modules>
    <singleton-services>
      <service name="TestSingleton1" need="required" />
      <service name="SingletonService1" need="required" />
    </singleton-services>
    
    <entry-points where="init">
      <entry-point name="SingletonServiceTestModule.Init"/>
    </entry-points>
    
    <entry-points where="compute-loop">
      <entry-point name="SingletonServiceTestModule.Compute"/>
    </entry-points>
  </time-loop>
    
  <time-loop name="TimeHistoryTestModuleLoop">
    <title>Boucle en temps pour tester ITimeHistoryMng</title>
    <description>Boucle en temps pour tester ITimeHistoryMng</description>
    <modules>
      <module name="TimeHistoryTest" need="required" />
    </modules>

    <entry-points where="init">
      <entry-point name="TimeHistoryTest.Init"/>
    </entry-points>

    <entry-points where="compute-loop">
      <entry-point name="TimeHistoryTest.Compute"/>
    </entry-points>

    <entry-points where="exit">
      <entry-point name="TimeHistoryTest.Exit"/>
    </entry-points>
  </time-loop>

   <time-loop name="TimeHistoryAdderTestModuleLoop">
     <title>Boucle en temps pour tester ITimeHistoryAdder</title>
     <description>Boucle en temps pour tester les implementations de ITimeHistoryAdder</description>
     <modules>
       <module name="TimeHistoryAdderTest" need="required" />
       <module name="ArcaneCheckpoint" need="required" />
     </modules>

     <entry-points where="init">
       <entry-point name="TimeHistoryAdderTest.Init"/>
     </entry-points>

     <entry-points where="compute-loop">
       <entry-point name="TimeHistoryAdderTest.Loop"/>
     </entry-points>

     <entry-points where="exit">
       <entry-point name="TimeHistoryAdderTest.Exit"/>
     </entry-points>

   </time-loop>

   <time-loop name="MeshPolyhedralTestLoop">
     <title>Boucle en temps pour tester le branchement de maillage custom</title>
     <description>Boucle en temps pour tester le branchement de maillage custom</description>
     <modules>
       <module name="ArcanePostProcessing" need="required" />
       <module name="MeshPolyhedralTest" need="required"/>
     </modules>

     <entry-points where="init">
       <entry-point name="MeshPolyhedralTest.Init"/>
     </entry-points>

   </time-loop>

  <time-loop name="MaterialHeatTestLoop">
    <title>Boucle en temps pour tester le module MaterialHeat</title>
    <description>Boucle en temps pour tester le module MaterialHeat</description>
    <modules>
      <module name="ArcanePostProcessing" need="required" />
      <module name="MaterialHeatTest" need="required"/>
      <module name="ArcaneLoadBalance" need="required" />
    </modules>

    <entry-points where="build">
      <entry-point name="MaterialHeatTest.BuildInit"/>
    </entry-points>
    <entry-points where="init">
      <entry-point name="MaterialHeatTest.StartInit"/>
      <entry-point name="MaterialHeatTest.ContinueInit"/>
    </entry-points>
    <entry-points where="compute-loop">
      <entry-point name="MaterialHeatTest.Compute"/>
    </entry-points>
  </time-loop>

   <time-loop name="MeshCriteriaLoadBalanceMngTestModuleLoop">
     <title>Boucle en temps pour tester MeshCriteriaLoadBalanceMng</title>
     <description>Boucle en temps pour tester MeshCriteriaLoadBalanceMng</description>
     <modules>
       <module name="MeshCriteriaLoadBalanceMngTest" need="required"/>
       <module name="ArcaneCheckpoint" need="required"/>
     </modules>

     <entry-points where="init">
       <entry-point name="MeshCriteriaLoadBalanceMngTest.Init"/>
     </entry-points>

     <entry-points where="compute-loop">
       <entry-point name="MeshCriteriaLoadBalanceMngTest.Loop"/>
     </entry-points>

     <entry-points where="exit">
       <entry-point name="MeshCriteriaLoadBalanceMngTest.Exit"/>
     </entry-points>

   </time-loop>

 </time-loops>
</arcane-config>
