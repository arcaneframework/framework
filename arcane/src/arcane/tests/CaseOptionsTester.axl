<?xml version="1.0" encoding="ISO-8859-1" ?><!-- -*- SGML -*- -->

<!-- ###################################################################### -->

<module name="CaseOptionsTester" version="1.0" namespace-name="ArcaneTest"> 
    <description>
      Module de test des options du jeu de données
      Test des entités spéciales: 
    </description>
    <interface name="ArcaneTest::ICaseOptionTestInterface" />
 <options>
 
  <!-- - - - - - max-iteration - - - - -->
  <simple
   name = "test-id"
   type = "integer"
    >
   <description>Numéro du test (sert pour les vérifications)</description>
  </simple>

  <!-- - - - - - max-iteration - - - - -->
  <simple
   name = "max-iteration"
   type = "integer"
   default = "10"
  >
   <description>Nombre maximum d'itérations</description>
  </simple>

  <!-- - - - - - simple-real - - - - -->
  <simple
    name = "simple-real"
    type     = "real"
    >
    <defaultvalue category="X1">25.3</defaultvalue>
    <description>SimpleReal</description>
  </simple>

  <!-- - - - - - simple-real - - - - -->
  <simple
   name = "simple-real-optional"
   type     = "real"
   optional = "true"
  >
   <description>SimpleReal</description>
  </simple>

  <!-- - - - - - simple-real2 - - - - -->
  <simple
   name = "simple-real2"
   type     = "real2"
  >
   <description>SimpleReal2</description>
  </simple>

  <!-- - - - - - simple-real3 - - - - -->
  <simple
   name = "simple-real3"
   type     = "real3"
  >
    <defaultvalue category="X1">25.1 12.3 1.0</defaultvalue>
    <defaultvalue category="X2">3.5 2.3 -1.0e3</defaultvalue>
   <description>SimpleReal3</description>
  </simple>


  <!-- - - - - - simple-real2x2 - - - - -->
  <simple
   name = "simple-real2x2"
   type     = "real2x2"
  >
   <description>SimpleReal2x2</description>
  </simple>

  <!-- - - - - - simple-real3x3 - - - - -->
  <simple
   name = "simple-real3x3"
   type     = "real3x3"
  >
   <description>SimpleReal3x3</description>
  </simple>

  <!-- - - - - - simple-integer - - - - -->
  <simple
   name = "simple-integer"
   type     = "integer"
  >
   <description>SimpleInteger</description>
  </simple>

  <!-- - - - - - simple-int32 - - - - -->
  <simple
   name = "simple-int32"
   type = "int32"
  >
   <description>SimpleInt32</description>
  </simple>

  <!-- - - - - - simple-int64 - - - - -->
  <simple
   name = "simple-int64"
   type = "int64"
  >
   <description>SimpleInt64</description>
  </simple>

  <!-- - - - - - simple-bool - - - - -->
  <simple
   name = "simple-bool"
   type     = "bool"
  >
   <description>SimpleBool</description>
  </simple>

  <!-- - - - - - simple-string - - - - -->
  <simple
   name = "simple-string"
   type     = "string"
  >
   <description>SimpleString</description>
  </simple>

  <!-- - - - - - simple-string - - - - -->
  <simple
   name = "simple-string-multiple"
    type = "string"
    minOccurs = "0"
    maxOccurs = "unbounded"
  >
   <description>SimpleStringMultiple</description>
  </simple>


  <!-- - - - - - simple-real-array - - - - -->
  <simple
   name = "simple-real-array"
   type     = "real[]"
  >
   <description>SimpleRealArray</description>
  </simple>

  <!-- - - - - - simple-real-array-multi - - - - -->
  <simple
   name = "simple-real-array-multi"
   type     = "real[]"
   minOccurs = "1"
   maxOccurs = "5"
  >
   <description>SimpleRealArrayMulti</description>
  </simple>

  <!-- - - - - - simple-integer-array - - - - -->
  <simple
   name = "simple-integer-array"
   type     = "integer[]"
  >
   <description>SimpleIntegerArray</description>
  </simple>

  <!-- - - - - - simple-int32-array - - - - -->
  <simple
   name = "simple-int32-array"
   type = "int32[]"
  >
    <defaultvalue category="X1">3 -4 5 -6 7</defaultvalue>
   <description>SimpleInt32Array</description>
  </simple>

  <!-- - - - - - simple-int64-array - - - - -->
  <simple
   name = "simple-int64-array"
   type = "int64[]"
  >
   <description>SimpleInt64Array</description>
  </simple>

  <!-- - - - - - simple-bool-array - - - - -->
  <simple
   name = "simple-bool-array"
   type     = "bool[]"
  >
   <description>SimpleBoolArray</description>
  </simple>

  <!-- - - - - - simple-string-array - - - - -->
  <simple
   name = "simple-string-array"
   type     = "string[]"
  >
   <description>SimpleStringArray</description>
  </simple>

  <!-- - - - - - simple-real-unit - - - - -->
  <simple
   name = "simple-real-unit"
   type = "real"
   unit = "m"
  >
   <description>SimpleReal with unit</description>
  </simple>

  <!-- - - - - - simple-real-unit2 - - - - -->
  <simple
   name = "simple-real-unit2"
   type = "real"
   unit = "m"
  >
   <description>SimpleReal with unit</description>
  </simple>

  <!-- - - - - - simple-real-unit2 - - - - -->
  <simple
   name = "simple-realarray-unit"
   type = "real[]"
   unit = "cm"
  >
   <description>SimpleRealArray with unit</description>
  </simple>

  <simple
   name = "simple-with-standard-function"
   type = "real"
   default = "0.5"
  >
   <description>Test pour fonction standard</description>
  </simple>

  <!-- - - - - - simple-enum - - - - -->
  <enumeration
   name = "simple-enum"
   type     = "TypesCaseOptionsTester::eSimpleEnum"
  >
    <defaultvalue category="X1">enum2</defaultvalue>
   <description>SimpleEnum</description>
   <enumvalue genvalue="TypesCaseOptionsTester::SEEnum1" name="enum1"/>
   <enumvalue genvalue="TypesCaseOptionsTester::SEEnum2" name="enum2"/>
  </enumeration>

  <!-- - - - - - simple-enum-function - - - - -->
  <enumeration
   name = "simple-enum-function"
   type = "TypesCaseOptionsTester::eSimpleEnum"
  >
   <description>SimpleEnum</description>
   <enumvalue genvalue="TypesCaseOptionsTester::SEEnum1" name="enum1"/>
   <enumvalue genvalue="TypesCaseOptionsTester::SEEnum2" name="enum2"/>
  </enumeration>

  <!-- - - - - - extended-real-int - - - - -->
  <extended
   name = "extended-real-int"
   type     = "ArcaneTest::TestRealInt"
  >
   <description>ExtendedRealInt</description>
  </extended>

  <!-- - - - - - extended-real-int-optional - - - - -->
  <extended
   name = "extended-real-int-optional"
   type     = "ArcaneTest::TestRealInt"
   optional = "true"
  >
   <description>ExtendedRealInt</description>
  </extended>

  <!-- - - - - - cell-group-with-dynamic-default - - - - -->
  <!-- NOTE: la valeur par défaut est positionnée dans le code C++ -->
  <extended
   name = "cell-group-with-dynamic-default"
    type     = "Arcane::CellGroup"
  >
   <description>CellGroupWithDynamicDefault</description>
  </extended>

  <!-- - - - - - face-group-with-dynamic-default - - - - -->
  <!-- NOTE: la valeur par défaut est positionnée dans le code C++ -->
  <extended
    name = "face-group-with-dynamic-default"
    type = "Arcane::FaceGroup"
  >
   <description>FaceGroupWithDynamicDefault</description>
  </extended>

  <!-- - - - - - simple-real-with-dynamic-default - - - - -->
  <!-- NOTE: la valeur par défaut est positionnée dans le code C++ -->
  <simple
   name = "simple-real-with-dynamic-default"
   type     = "real"
  >
   <description>SimpleRealWithDefault</description>
  </simple>

  <!-- - - - - - simple-real-with-default - - - - -->
  <simple
   name = "simple-real-with-default"
   type = "real"
   default = "1.0"
  >
   <description>SimpleRealWithDefault</description>
  </simple>

  <!-- - - - - - simple-realarray-with-default - - - - -->
  <simple
   name = "simple-realarray-with-default"
   type     = "real[]"
   default  = "1.0 3.5"
  >
   <description>SimpleRealArrayWithDefault</description>
  </simple>

  <!-- - - - - - simple-real3-with-default - - - - -->
  <simple
   name = "simple-real3-with-default"
   type     = "real3"
   default  = "1.0 3.5 4.6"
  >
   <description>SimpleReal3WithDefault</description>
  </simple>

  <!-- - - - - - simple-integer-with-default - - - - -->
  <simple
   name = "simple-integer-with-default"
   type     = "integer"
   default  = "5"
  >
   <description>SimpleIntegerWithDefault</description>
  </simple>

  <!-- - - - - - simple-bool-with-default - - - - -->
  <simple
   name = "simple-bool-with-default"
   type     = "bool"
   default  = "true"
  >
   <description>SimpleBoolWithDefault</description>
  </simple>

  <!-- - - - - - simple-string-with-default - - - - -->
  <simple
   name = "simple-string-with-default"
   type = "string"
   default = "foo"
  >
   <description>SimpleStringWithDefault</description>
  </simple>

  <simple
   name = "infinity-real"
   type = "real"
   default = "infinity"
  >
   <description>InfinityByDefault</description>
  </simple>

  <!-- - - - - - extended-real-int-with-default - - - - -->
  <extended
   name = "extended-real-int-with-default"
   type = "ArcaneTest::TestRealInt"
   default = "2. 3"
  >
   <description>ExtendedRealIntWithDefault</description>
  </extended>

  <!-- - - - - - simple-enum-with-default - - - - -->
  <enumeration
   name = "simple-enum-with-default"
   type = "TypesCaseOptionsTester::eSimpleEnum"
   default = "enum2"
  >
    <defaultvalue category="X1">enum3</defaultvalue>
    <defaultvalue category="X2">enum4</defaultvalue>
   <name lang='fr'>simple-enum-avec-defaut</name>
   <description>SimpleEnumWithDefault</description>
   <enumvalue genvalue="TypesCaseOptionsTester::SEEnum1" name="enum1"/>
   <enumvalue genvalue="TypesCaseOptionsTester::SEEnum2" name="enum2"/>
   <enumvalue genvalue="TypesCaseOptionsTester::SEEnum3" name="enum3"/>
   <enumvalue genvalue="TypesCaseOptionsTester::SEEnum4" name="enum4"/>
  </enumeration>

  <!-- - - - - - post-processor1 - - - - -->
  <service-instance
   name = "post-processor1"
   type = "Arcane::IPostProcessorWriter"
   minOccurs = "0"
   maxOccurs = "unbounded"
  >
   <name lang='fr'>post-processor1-fr</name>
   <description>Liste des services de protection</description>
  </service-instance>

  <!-- - - - - - post-processor3 - - - - -->
  <service-instance
   name = "post-processor2"
   type = "Arcane::IPostProcessorWriter"
   minOccurs = "0"
   maxOccurs = "unbounded"
  >
   <description>Liste des services de protection</description>
  </service-instance>

  <!-- - - - - - post-processor3 - - - - -->
  <service-instance
   name = "post-processor3"
   type = "Arcane::IPostProcessorWriter"
  >
   <name lang='fr'>post-processor3-fr</name>
   <description>Un service de post-traitement</description>
  </service-instance>

  <!-- - - - - - post-processor4 - - - - -->
  <service-instance
   name = "post-processor4"
   type = "Arcane::IPostProcessorWriter"
  >
   <description>Un service de post-traitement</description>
  </service-instance>

  <!-- - - - - - test-service-with-dynamic-default - - - - -->
  <service-instance
    name = "test-service-with-dynamic-default"
    type = "ArcaneTest::IServiceInterface1"
    >
    <description>Service de test avec valeur par défaut</description>
  </service-instance>

  <!-- - - - - - service-instance-test1 - - - - -->
  <service-instance
    name = "service-instance-test1"
    type = "ArcaneTest::IServiceInterface1"
    default = "ServiceTestImpl4"
  >
    <defaultvalue category="X1">ServiceTestImpl2</defaultvalue>
    <defaultvalue category="X2">ServiceTestImpl3</defaultvalue>
   <description>Un service de test pour IServiceInterface1</description>
  </service-instance>

  <!-- - - - - - complex1 - - - - -->
  <complex
   name = "complex1"
   type = "Complex1"
   interface = "IComplex1Interface"
  >
   <description>Complex1</description>

   <simple
    name = "simple-real-2"
    type = "real"
    optional = 'true'
   >
    <description>SimpleReal-2</description>
   </simple>

   <simple
    name = "simple-real-2-multi"
    type = "real"
     minOccurs = "1"
     maxOccurs = "unbounded"
   >
    <description>SimpleReal-2-Multi</description>
   </simple>

   <simple
    name = "simple-integer-2"
    type = "integer"
   >
    <description>SimpleInteger-2</description>
   </simple>

   <simple
    name = "simple-real3-2"
    type = "real3"
   >
    <description>SimpleReal3-2</description>
   </simple>
   <extended
    name = "extended-real-int-2"
    type = "ArcaneTest::TestRealInt"
    optional = 'true'
   >
    <description>ExtendedRealInt2</description>
   </extended>
   <enumeration
    name = "simple-enum-2"
    type = "TypesCaseOptionsTester::eSimpleEnum"
    optional = 'true'
   >
    <description>SimpleEnum2</description>
    <enumvalue genvalue="TypesCaseOptionsTester::SEEnum1" name="enum1"/>
    <enumvalue genvalue="TypesCaseOptionsTester::SEEnum2" name="enum2"/>
   </enumeration>

   <complex
      name = "complex1-sub"
      type = "Complex1Sub"
      interface = "IComplex1SubInterface"
      optional = 'true'
      >
     <simple name="sub-test1" type="real[]" optional='true' />
     <simple name="sub-test2" type="real3x3" optional='true' />
   </complex>
   <complex
      name = "complex1-subref"
      ref = "Complex1Sub"
      >
   </complex>
  </complex>

  <!-- - - - - - complex2 - - - - -->
  <complex
   name = "complex2"
   type = "Complex2"
   minOccurs = "1"
   maxOccurs = "2"
   interface = "IComplex2Interface"
  >
   <description>Complex2</description>
   <simple
    name = "simple-real-c2"
    type = "real"
   >
    <description>SimpleReal2</description>
   </simple>

   <simple
    name = "simple-bool-c2"
    type = "bool"
   >
    <description>SimpleBool2</description>
   </simple>

   <simple
    name = "simple-integer-c2"
    type = "integer"
   >
    <description>SimpleInteger2</description>
   </simple>
   <simple
     name = "simple-integer-c2-with-default"
     type = "integer"
     default = "35"
   >
    <description>SimpleInteger2WithDefault</description>
   </simple>
   <extended
    name = "extended-real-int-c2"
    type = "ArcaneTest::TestRealInt"
   >
    <description>ExtendedRealInt2</description>
   </extended>
   <enumeration
    name = "simple-enum-c2"
    type = "TypesCaseOptionsTester::eSimpleEnum"
   >
    <description>SimpleEnum2</description>
    <enumvalue genvalue="TypesCaseOptionsTester::SEEnum1" name="enum1"/>
    <enumvalue genvalue="TypesCaseOptionsTester::SEEnum2" name="enum2"/>
   </enumeration>

   <!-- - - - - - complex3Ref - - - - -->
   <complex
     name = "complex3Ref"
     ref = "Complex3"
    >
    <description>Complex3Ref comme Complex3</description>
   </complex>

   <!-- - - - - - complex3 - - - - -->
   <complex
    name = "complex3"
    type = "Complex3"
    minOccurs = "0"
    maxOccurs = "unbounded"
    interface = "IComplex3Interface"
   >
    <description>Complex3</description>
    <simple
     name = "simple-real-c3"
     type = "real"
     minOccurs = "0"
     maxOccurs = "unbounded"
    >
     <description>SimpleReal2</description>
    </simple>
    <simple
     name = "simple-integer-c3"
     type = "integer"
     minOccurs = "0"
     maxOccurs = "unbounded"
    >
     <description>SimpleInteger2</description>
    </simple>
     <!-- - - - - - simple-service - - - - -->
      <service-instance
       name = "timeloop-tester"
       type = "Arcane::ITimeLoopService"
      >
      <description>Service de test de protection</description>
     </service-instance>
    <extended
     name = "extended-real-int-c3"
     type = "ArcaneTest::TestRealInt"
     minOccurs = "0"
     maxOccurs = "unbounded"
    >
     <description>ExtendedRealInt2</description>
    </extended>
    <enumeration
     name = "simple-enum-c3"
     type = "TypesCaseOptionsTester::eSimpleEnum"
     minOccurs = "0"
     maxOccurs = "unbounded"
    >
     <description>SimpleEnum2</description>
     <enumvalue genvalue="TypesCaseOptionsTester::SEEnum1" name="enum1"/>
     <enumvalue genvalue="TypesCaseOptionsTester::SEEnum2" name="enum2"/>
    </enumeration>
   </complex>
  </complex>

  <!-- - - - - - complex4 - - - - -->
  <complex
   interface = "IComplex4Interface"
   name = "complex4"
   type = "Complex4"
  >
   <description>Complex4</description>
   <simple
    name = "simple-real"
    type = "real"
   >
    <description>SimpleReal</description>
   </simple>
  </complex>

  <!-- - - - - - complex5 - - - - -->
  <complex
   name = "complex5"
   ref = "Complex4"
  >
   <description>Complex5 comme Complex4</description>
   <!-- <simple
    name = "simple-real"
    type = "real"
   >
    <description>SimpleReal</description>
   </simple> -->
  </complex>

  <!-- - - - - - complex6 - - - - -->
  <complex
   name = "complex6"
   type = "Complex6"
   optional = "true"
  >
   <description>Complex6 Optionel</description>
   <simple
    name = "simple-real"
    type = "real"
   >
    <description>SimpleReal</description>
   </simple>
  </complex>

  <complex
    name = "complex7"
    type = "Complex7"
    >
    <complex
      name = "complex8"
      type = "Complex8"
      minOccurs = "0"
      maxOccurs = "unbounded"
      >
      <extended name="group" type="Arcane::CellGroup" minOccurs="0" maxOccurs="unbounded" />
    </complex>
  </complex>
  <!-- 
        <complex name="method" type="Method">
            <complex name="another-param" type="Param">
                <name lang="fr">autre-param</name>
                <simple name="value" type="real">
                    <name lang="fr">valeur</name>
                </simple>
                <simple name="name" type="string"/>
            </complex>
            <simple name="name" type="string"/>
            <complex name="parameter" ref="Param">
                <name lang="fr">parametre</name>
            </complex>
        </complex> -->

 </options>
  
</module>
