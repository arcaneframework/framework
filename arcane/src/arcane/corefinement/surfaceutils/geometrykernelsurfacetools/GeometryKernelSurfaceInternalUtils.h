// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
#ifndef ARCGEOSIM_SURFACEUTILS_GEOMETRYKERNELSURFACETOOLS_GEOMETRYKERNELSURFACEINTERNALUTILS_H
#define ARCGEOSIM_SURFACEUTILS_GEOMETRYKERNELSURFACETOOLS_GEOMETRYKERNELSURFACEINTERNALUTILS_H
/* Author : havep at Wed Apr  1 14:31:35 2009
 * Generated by createNew
 */

#include <arcane/Item.h>
#include <arcane/utils/Array.h>
#include <arcane/utils/Real3.h>
#include "arcane/VariableTypes.h"
#include <arcane/ItemGroup.h>
#include <arcane/IMeshSubMeshTransition.h>

#include <GeometryKernel/datamodel/micro/surface/triangulation-data-structure.h>
#include <GeometryKernel/datamodel/geometry/vector.h>

#include <map>

ARCANE_BEGIN_NAMESPACE
NUMERICS_BEGIN_NAMESPACE
using namespace Arcane;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

//! Build GK triangulation and additional data from a face group
void buildFaceGroupSurface(FaceGroup group, 
                           GeometryKernel::TriangulationDataStructurePtr m_triangulation,
                           Array<Node> & m_node_array,
                           Array<Face> & m_face_array,
                           Array<bool> & m_face_reorient,
                           Real3 & m_mean_normal);
//! Save surface utility for debugging purpose (binary format)
void saveSurface(const char * filename, GeometryKernel::TriangulationDataStructure & tr);
//! Load surface utility for debugging purpose (binary format)
void loadSurface(const char * filename, GeometryKernel::TriangulationDataStructure & tr);
//! convert GeometryKernel vector to Real3
inline Real3 convertGKVector(const GeometryKernel::Vector & v) { return Real3(v.getX(),v.getY(),v.getZ()); }
inline GeometryKernel::Vector convertGKVector(const Real3 & v) { return GeometryKernel::Vector(v.x,v.y,v.z); }

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

class NodeMapping {
public:
  NodeMapping(IMesh * mesh, 
              Array<Node> & node_array, 
              GeometryKernel::TriangulationDataStructure & triangulation) 
    : m_nodes_coordinates(PRIMARYMESH_CAST(mesh)->nodesCoordinates()), 
      m_node_array(node_array),
      m_triangulation(triangulation)
  { 
    ;
  }
  
  GeometryKernel::TObjectId getNodeId(const Node node) 
  {
    const Integer inode = node.localId();
    std::pair<KnownNodes::iterator,bool> inserter = m_known_nodes.insert(KnownNodes::value_type(inode,NULL_ID));
    if (inserter.second) 
      { // New value
        const Real3 coords = m_nodes_coordinates[node];
        const GeometryKernel::TObjectId new_id = m_triangulation.newVertex(GeometryKernel::Vector(coords.x,coords.y,coords.z));
        ARCANE_ASSERT(((Integer)m_node_array.size()==(Integer)new_id),("Non-synchronized GeometryKernel with internal SurfaceImpl [%d vs %d]",new_id,m_node_array.size()));
        m_node_array.add(node);
        return (inserter.first->second = new_id);
      }
    else
      { // Already existing value
        return inserter.first->second;          
      }
  }

  Real3 computeNormal(const Node node1, const Node node2, const Node node3) {
    const Real3 node1_coord = m_nodes_coordinates[node1];
    const Real3 node2_coord = m_nodes_coordinates[node2];
    const Real3 node3_coord = m_nodes_coordinates[node3];
    return math::vecMul(node2_coord-node1_coord,node3_coord-node1_coord);
  }

private:
  const VariableNodeReal3 & m_nodes_coordinates;
  Array<Node> & m_node_array;
  GeometryKernel::TriangulationDataStructure & m_triangulation;
  
  typedef std::map<Integer,GeometryKernel::TObjectId> KnownNodes;
  KnownNodes m_known_nodes;
};

/*---------------------------------------------------------------------------*/

NUMERICS_END_NAMESPACE
ARCANE_END_NAMESPACE

#endif /* ARCGEOSIM_SURFACEUTILS_GEOMETRYKERNELSURFACETOOLS_GEOMETRYKERNELSURFACEINTERNALUTILS_H */
