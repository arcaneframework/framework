// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
#ifndef ARCANEDEMO_PARALLELCOREFINEMENT_PARALLELCOREFINEMENTSERVICE_H
#define ARCANEDEMO_PARALLELCOREFINEMENT_PARALLELCOREFINEMENTSERVICE_H
/* Author : havep at Wed Feb 18 14:18:06 2009
 * Generated by createNew
 */

#include "IParallelCorefinement.h"

namespace Arcane { }
using namespace Arcane;
using namespace Arcane::Numerics;

#include <arcane/corefinement/surfaceutils/ISurfaceUtils.h>
#include <arcane/corefinement/ParallelCorefinement_axl.h>

ARCANE_BEGIN_NAMESPACE
NUMERICS_BEGIN_NAMESPACE

class ParallelCorefinementService :
  public ArcaneParallelCorefinementObject
{
public:
  /** Constructeur de la classe */
  ParallelCorefinementService(const Arcane::ServiceBuildInfo & sbi);
  
  /** Destructeur de la classe */
  virtual ~ParallelCorefinementService();
  
public:

  //! Initialisation
  void init(const FaceGroup & masterGroup, 
            const FaceGroup & slaveGroup, 
            const Real boxTolerance,
            IGeometry * geometry);

  //! Update
  void update();

  //! Access to computed contacts
  const FaceFaceContactList & contacts();

private:
  FaceGroup m_master_group;
  FaceGroup m_slave_group;
  Real m_box_tolerance;
  IGeometry * m_geometry;
  FaceFaceContactList m_contacts;

  //! Localisation d'algorithme interne
  /*! Masquage des algorithmes ou structures internes */
  class Internal;
  Internal * m_internal;
};

NUMERICS_END_NAMESPACE
ARCANE_END_NAMESPACE

#endif /* ARCANEDEMO_PARALLELCOREFINEMENT_PARALLELCOREFINEMENTSERVICE_H */
