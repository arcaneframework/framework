// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
/*---------------------------------------------------------------------------*/
/* VersionInfo.cc                                              (C) 2000-2018 */
/*                                                                           */
/* Informations sur une version d'un objet.                                  */
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#include "arcane/utils/ArcanePrecomp.h"

#include "arcane/utils/Iostream.h"
#include "arcane/utils/String.h"

#include "arcane/utils/VersionInfo.h"

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

ARCANE_BEGIN_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

VersionInfo::
VersionInfo()
: m_major(0)
, m_minor(0)
, m_patch(0)
{
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

VersionInfo::
VersionInfo(int vmajor,int vminor,int vpatch)
: m_major(vmajor)
, m_minor(vminor)
, m_patch(vpatch)
{
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

static void
_parseStr(std::istream& istr,int& version)
{
  if (!istr.good())
    return;
  int z = 0;
  char buf[2];
  istr >> z;
  istr.read(buf,1);
  if (z<0)
    z = 0;
  version = z;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

VersionInfo::
VersionInfo(const String& version_str)
: m_major(0)
, m_minor(0)
, m_patch(0)
{
  std::istringstream istr(version_str.localstr());
  _parseStr(istr,m_major);
  _parseStr(istr,m_minor);
  _parseStr(istr,m_patch);
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

void VersionInfo::
write(std::ostream& o) const
{
  o << versionMajor() << '.' << versionMinor() << '.' << versionPatch();
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

String VersionInfo::
versionAsString() const
{
  return String::format("{0}.{1}.{2}",versionMajor(),versionMinor(),versionPatch());
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

std::ostream&
operator<<(std::ostream& o,const VersionInfo& vi)
{
  vi.write(o);
  return o;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

ARCANE_END_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

