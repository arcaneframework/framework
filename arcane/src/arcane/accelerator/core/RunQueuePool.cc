// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2024 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
/*---------------------------------------------------------------------------*/
/* RunQueuePool.cc                                             (C) 2000-2024 */
/*                                                                           */
/* Collection de RunQueue.                                                   */
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#include "arcane/accelerator/core/RunQueuePool.h"
#include "arcane/accelerator/core/RunQueueBuildInfo.h"

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

namespace Arcane::Accelerator
{

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

RunQueuePool::
RunQueuePool()
: m_pool_size(1)
{
  m_pool.add(RunQueue{});
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

void RunQueuePool::
initialize(Runner& runner, Int32 pool_size)
{
  initialize(runner, pool_size, {});
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

void RunQueuePool::
initialize(Runner& runner, Int32 pool_size, const RunQueueBuildInfo& bi)
{
  if (pool_size <= 0)
    pool_size = 1;
  m_pool_size = pool_size;

  m_pool.clear();
  m_pool.reserve(m_pool_size);

  for (Int32 i = 0; i < pool_size; ++i) {
    m_pool.add(makeQueue(runner, bi));
  }
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

void RunQueuePool::
barrier() const
{
  for (auto q : m_pool)
    q.barrier();
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

void RunQueuePool::
setAsync(bool v) const
{
  for (auto q : m_pool)
    q.setAsync(v);
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

} // End namespace Arcane::Accelerator

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
