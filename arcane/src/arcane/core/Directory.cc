// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
/*---------------------------------------------------------------------------*/
/* Directory.cc                                                (C) 2000-2010 */
/*                                                                           */
/* Gestion d'un répertoire.                                                  */
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#include "arcane/utils/ArcanePrecomp.h"

#include "arcane/utils/String.h"
#include "arcane/utils/StringBuilder.h"
#include "arcane/utils/Iostream.h"
#include "arcane/utils/PlatformUtils.h"

#include "arcane/Directory.h"

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

ARCANE_BEGIN_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

static String
_appendFile(const String& directory,const String& file)
{
  StringBuilder out_str(directory);
#ifdef ARCANE_OS_WIN32
  out_str += "\\";
#else /* ARCANE_OS_WIN32 */
  out_str += "/";
#endif /* ARCANE_OS_WIN32 */
  out_str += file;
  return out_str.toString();
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

Directory::
Directory()
{
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

Directory::
Directory(const String& path)
: m_directory_path(path)
{
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

Directory::
Directory(const IDirectory& directory,const String& sub_path)
: m_directory_path(_appendFile(directory.path(),sub_path))
{
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

Directory::
Directory(const IDirectory& directory)
: m_directory_path(directory.path())
{
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

Directory::
Directory(const Directory& directory)
: m_directory_path(directory.path())
{
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

Directory::
~Directory()
{
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

const Directory& Directory::
operator=(const IDirectory& from)
{
  m_directory_path = from.path();
  return (*this);
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

const Directory& Directory::
operator=(const Directory& from)
{
  m_directory_path = from.m_directory_path;
  return (*this);
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

bool Directory::
createDirectory() const
{
  return platform::createDirectory(m_directory_path);
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

String Directory::
path() const
{
  return m_directory_path;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

String Directory::
file(const String& file_name) const
{
  return _appendFile(path(),file_name);
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

ARCANE_END_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

