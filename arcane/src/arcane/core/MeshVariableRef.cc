// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
/*---------------------------------------------------------------------------*/
/* MeshVariable.cc                                             (C) 2000-2024 */
/*                                                                           */
/* Variable du maillage.                                                     */
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#include "arcane/MeshVariableRef.h"
#include "arcane/ItemGroup.h"
#include "arcane/IMesh.h"
#include "arcane/MeshHandle.h"

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

namespace Arcane
{

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

MeshVariableRef::
MeshVariableRef(IVariable* var)
: VariableRef(var)
{
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

MeshVariableRef::
MeshVariableRef(const VariableBuildInfo& vbi)
: VariableRef(vbi)
{
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

MeshVariableRef::
MeshVariableRef(const MeshVariableRef& rhs)
: VariableRef(rhs)
{
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

void MeshVariableRef::
operator=(const MeshVariableRef& rhs)
{
  VariableRef::operator=(rhs);
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

void MeshVariableRef::
_internalInit(IVariable* var)
{
  VariableRef::_internalInit(var);
  MeshHandle mh = var->meshHandle();
  if (mh.hasMesh()){
    IMesh* mesh = mh.mesh();
    bool auto_init = mesh->isAllocated();
    if (auto_init){
      setUsed(true);
    }
  }
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

void MeshVariableRef::
synchronize()
{
  variable()->synchronize();
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

void MeshVariableRef::
synchronize(Int32ConstArrayView local_ids)
{
  variable()->synchronize(local_ids);
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

} // End namespace Arcane

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
