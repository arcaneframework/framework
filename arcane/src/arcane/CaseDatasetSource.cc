// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
//-----------------------------------------------------------------------------
// Copyright 2000-2022 CEA (www.cea.fr) IFPEN (www.ifpenergiesnouvelles.com)
// See the top-level COPYRIGHT file for details.
// SPDX-License-Identifier: Apache-2.0
//-----------------------------------------------------------------------------
/*---------------------------------------------------------------------------*/
/* CaseDatasetSource.cc                                        (C) 2000-2021 */
/*                                                                           */
/* Source d'un jeu de données d'un cas.                                      */
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#include "arcane/CaseDatasetSource.h"

#include "arcane/utils/String.h"
#include "arcane/utils/Array.h"

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

namespace Arcane
{

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

class CaseDatasetSource::Impl
{
 public:
  String m_file_name;
  UniqueArray<std::byte> m_content;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

CaseDatasetSource::
CaseDatasetSource()
: m_p(new Impl())
{
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

CaseDatasetSource::
CaseDatasetSource(const CaseDatasetSource& rhs)
: m_p(new Impl(*rhs.m_p))
{
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

CaseDatasetSource& CaseDatasetSource::
operator=(const CaseDatasetSource& rhs)
{
  if (&rhs!=this){
    delete m_p;
    m_p = new Impl(*rhs.m_p);
  }
  return *this;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

CaseDatasetSource::
~CaseDatasetSource()
{
  delete m_p;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
void CaseDatasetSource::
setFileName(const String& name)
{
  m_p->m_file_name = name;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

String CaseDatasetSource::
fileName() const
{
  return m_p->m_file_name;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

void CaseDatasetSource::
setContent(ByteConstSpan bytes)
{
  m_p->m_content = bytes;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

void CaseDatasetSource::
setContent(Span<const Byte> bytes)
{
  auto d = reinterpret_cast<const std::byte*>(bytes.data());
  m_p->m_content = ByteConstSpan(d,bytes.size());
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

ByteConstSpan CaseDatasetSource::
content() const
{
  return m_p->m_content;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

} // End namespace Arcane

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
