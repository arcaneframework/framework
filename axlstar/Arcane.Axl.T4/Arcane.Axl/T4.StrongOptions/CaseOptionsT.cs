//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.28
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Arcane.Axl {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class CaseOptionsT : CaseOptionsTBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            this.Write("\n");
  Action<OptionHandler, String, String> getterSection = (OptionHandler _xml, String beginLineSpace, String redirectionPrefix) => { 
 foreach(var simple in _xml.Simple) {
	string return_type = simple.type.QualifiedName();
	if (simple.IsSingle == false) {
		return_type = return_type.ToArrayType();
	}
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write(this.ToStringHelper.ToStringWithCulture( return_type ));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture( simple.Name.ToFuncName() ));
            this.Write("() const\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("{\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("  return ");
            this.Write(this.ToStringHelper.ToStringWithCulture( redirectionPrefix ));
            this.Write(this.ToStringHelper.ToStringWithCulture( simple.Name.ToFuncName() ));
            this.Write("() ;\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("}\n");
 } 
 foreach(var enumerator in _xml.Enumeration) {
	string return_type = enumerator.type;
	if (enumerator.IsSingle == true) { 
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write(this.ToStringHelper.ToStringWithCulture( return_type ));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture( enumerator.Name.ToFuncName() ));
            this.Write("() const\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("{\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("  return ");
            this.Write(this.ToStringHelper.ToStringWithCulture( redirectionPrefix ));
            this.Write(this.ToStringHelper.ToStringWithCulture( enumerator.Name.ToFuncName() ));
            this.Write("();\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("}\n");
	}
	else{ 
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write(this.ToStringHelper.ToStringWithCulture( return_type.ToArrayType() ));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture( enumerator.Name.ToFuncName() ));
            this.Write("() const\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("{\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("  return ");
            this.Write(this.ToStringHelper.ToStringWithCulture( redirectionPrefix ));
            this.Write(this.ToStringHelper.ToStringWithCulture( enumerator.Name.ToFuncName() ));
            this.Write(";\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("}\n");
  } 
 } 
 foreach(var service in _xml.ServiceInstance) {
	string return_type = service.type + "*";
	if (service.IsSingle == false) {
		return_type = return_type.ToArrayType();
	} 
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write(this.ToStringHelper.ToStringWithCulture( return_type ));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture( service.Name.ToFuncName() ));
            this.Write("() const\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("{ \n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("  return ");
            this.Write(this.ToStringHelper.ToStringWithCulture( redirectionPrefix ));
            this.Write(this.ToStringHelper.ToStringWithCulture( service.Name.ToFuncName() ));
            this.Write("(); \n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("}\n");
 } 
 foreach(var sub_complex in _xml.Complex.Where( p => !p.IsRef) ) {
	if (sub_complex.IsSingle == true) {
		string return_type = "const IOptions" + sub_complex.type + "&";
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write(this.ToStringHelper.ToStringWithCulture( return_type ));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture( sub_complex.Name.ToFuncName() ));
            this.Write("() const\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("{\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("  if(!m_initialize_");
            this.Write(this.ToStringHelper.ToStringWithCulture( sub_complex.Name.DashToUnderscore() ));
            this.Write("){\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("    m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( sub_complex.Name.DashToUnderscore() ));
            this.Write(" = new CaseOptionsT");
            this.Write(this.ToStringHelper.ToStringWithCulture( sub_complex.type ));
            this.Write("<typename CaseOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("::CaseOption");
            this.Write(this.ToStringHelper.ToStringWithCulture( sub_complex.type ));
            this.Write(">(& ");
            this.Write(this.ToStringHelper.ToStringWithCulture( redirectionPrefix ));
            this.Write(this.ToStringHelper.ToStringWithCulture( sub_complex.Name.ToFuncName() ));
            this.Write(");\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("    m_initialize_");
            this.Write(this.ToStringHelper.ToStringWithCulture( sub_complex.Name.DashToUnderscore() ));
            this.Write(" = true;\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("  }\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("  return *m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( sub_complex.Name.DashToUnderscore() ));
            this.Write(";\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("}\n");
 }
	else if (sub_complex.IsMulti == true) { 
		string return_type = "IOptions" + sub_complex.type + "*";
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write(this.ToStringHelper.ToStringWithCulture( return_type.ToArrayType() ));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture( sub_complex.Name.ToFuncName() ));
            this.Write("() const\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("{\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("  if(!m_initialize_");
            this.Write(this.ToStringHelper.ToStringWithCulture( sub_complex.Name.DashToUnderscore() ));
            this.Write("){\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("    m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( sub_complex.Name.DashToUnderscore() ));
            this.Write(".resize(");
            this.Write(this.ToStringHelper.ToStringWithCulture( redirectionPrefix ));
            this.Write(this.ToStringHelper.ToStringWithCulture( sub_complex.Name.ToFuncName() ));
            this.Write(".size());\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("    for (Arcane::Integer i = 0; i < ");
            this.Write(this.ToStringHelper.ToStringWithCulture( redirectionPrefix ));
            this.Write(this.ToStringHelper.ToStringWithCulture( sub_complex.Name.ToFuncName() ));
            this.Write(".size(); i++)\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("      m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( sub_complex.Name.DashToUnderscore() ));
            this.Write("[i] = new CaseOptionsT");
            this.Write(this.ToStringHelper.ToStringWithCulture( sub_complex.type ));
            this.Write("<typename CaseOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("::CaseOption");
            this.Write(this.ToStringHelper.ToStringWithCulture( sub_complex.type ));
            this.Write("Value>(& ");
            this.Write(this.ToStringHelper.ToStringWithCulture( redirectionPrefix ));
            this.Write(this.ToStringHelper.ToStringWithCulture( sub_complex.Name.ToFuncName() ));
            this.Write("[i]);\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("    m_initialize_");
            this.Write(this.ToStringHelper.ToStringWithCulture( sub_complex.Name.DashToUnderscore() ));
            this.Write(" = true;\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("  }\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("  return m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( sub_complex.Name.DashToUnderscore() ));
            this.Write(";\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("}\n");
 } 
            this.Write("\n");
 } 
 }; 
  Action<OptionHandler, String> destructorSection = (OptionHandler _xml, String beginLineSpace) => { 
  foreach(var sub_complex in _xml.Complex.Where( p => !p.IsRef) ) {
	string field_name  = "m_"+sub_complex.Name.DashToUnderscore(); 
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("if(m_initialize_");
            this.Write(this.ToStringHelper.ToStringWithCulture( sub_complex.Name.DashToUnderscore() ));
            this.Write(")\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("{\n");
 if(sub_complex.IsSingle == false ) { 
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("  for(auto iter=");
            this.Write(this.ToStringHelper.ToStringWithCulture( field_name ));
            this.Write(".begin();iter!=");
            this.Write(this.ToStringHelper.ToStringWithCulture( field_name ));
            this.Write(".end();++iter)\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("    delete *iter ;\n");
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("  ");
            this.Write(this.ToStringHelper.ToStringWithCulture( field_name ));
            this.Write(".resize(0);\n\t");
 }
	else {
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("\tdelete ");
            this.Write(this.ToStringHelper.ToStringWithCulture( field_name ));
            this.Write(";\n\t");
 } 
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("\tm_initialize_");
            this.Write(this.ToStringHelper.ToStringWithCulture( sub_complex.Name.DashToUnderscore() ));
            this.Write(" = false;\n\t}\n");
  } 
 }; 
            this.Write("/*---------------------------------------------------------------------------*/\n/" +
                    "*---------------------------------------------------------------------------*/\n/" +
                    "/ #WARNING#: This file has been generated automatically. Do not edit.\n// Arcane " +
                    "version ");
            this.Write(this.ToStringHelper.ToStringWithCulture( Version ));
            this.Write(" : ");
            this.Write(this.ToStringHelper.ToStringWithCulture( DateTime.Now ));
            this.Write("\n/*---------------------------------------------------------------------------*/\n" +
                    "/*---------------------------------------------------------------------------*/\n" +
                    "\n#ifndef ARCANE_CASEOPTIONST_");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.CppHeaderGuardName ));
            this.Write("_H\n#define ARCANE_CASEOPTIONST_");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.CppHeaderGuardName ));
            this.Write("_H\n\n/*---------------------------------------------------------------------------" +
                    "*/\n/*---------------------------------------------------------------------------" +
                    "*/\n\n#include \"");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("_IOptions.h\"\n\n/*-----------------------------------------------------------------" +
                    "----------*/\n/*-----------------------------------------------------------------" +
                    "----------*/\n");
 var non_ref_complex = Xml.FlatteningComplex.Where(p => !p.IsRef); 
            this.Write("\ntemplate<typename CaseOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write(">\nclass CaseOptionsT");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write(" : public IOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("\n{\npublic:\n\n");
 // I - Complex Options Definition 
 // 
 if (non_ref_complex.Count() > 0) { 
            this.Write("  /*-------------------------------------------------------------------------*/\n " +
                    " /*------------------------------- Complex Options -------------------------*/\n " +
                    " /*-------------------------------------------------------------------------*/\n");
 foreach(var complex in non_ref_complex) { 
            this.Write("\n  template<typename CaseOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.type ));
            this.Write(">\n  class CaseOptionsT");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.type ));
            this.Write(" : public IOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.type ));
            this.Write("\n  {\n  public:\t\n");
 // I - 1 Constructor 
 // 
            this.Write("    CaseOptionsT");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.type ));
            this.Write("(const CaseOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.type ));
            this.Write("* ");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.Name.ToFuncName() ));
            this.Write("options)\n    {\n      m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.Name.DashToUnderscore() ));
            this.Write(" = ");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.Name.ToFuncName() ));
            this.Write("options;\n");
 foreach(var sub_complex in complex.Xml.Complex.Where( p => !p.IsRef) ) { 
            this.Write("      m_initialize_");
            this.Write(this.ToStringHelper.ToStringWithCulture( sub_complex.Name.DashToUnderscore() ));
            this.Write(" = false;\n");
 } 
            this.Write("    }\n");
 //  Destructor 
            this.Write("    virtual ~CaseOptionsT");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.type ));
            this.Write("()\n    {\n");
 destructorSection(complex.Xml, "    "); 
            this.Write("    }\n");
 // I - 2 Getters 
 // 
 getterSection(complex.Xml, "		", "m_"+complex.Name.DashToUnderscore()+"->"); 
            this.Write("\n");
 // I - 3 Data members 
 // 
            this.Write("    const CaseOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.type ));
            this.Write("* m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.Name.DashToUnderscore() ));
            this.Write(";\n");
 foreach(var sub_complex in complex.Xml.Complex.Where( p => !p.IsRef) ) { 
	string complex_type =  "IOptions" + sub_complex.type + "*";
            this.Write("    mutable bool m_initialize_");
            this.Write(this.ToStringHelper.ToStringWithCulture( sub_complex.Name.DashToUnderscore() ));
            this.Write(";\n");
   if (sub_complex.IsSingle == true) { 
            this.Write("    mutable ");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex_type ));
            this.Write(" m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( sub_complex.Name.DashToUnderscore() ));
            this.Write(";\n");
 } else if (sub_complex.IsMulti == true) { 
            this.Write("    mutable ");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex_type.ToUniqueArrayType() ));
            this.Write(" m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( sub_complex.Name.DashToUnderscore() ));
            this.Write(";\n");
 } 
 } 
            this.Write("  };\n\n");
 } 
 } 
 // II - Main service options 
 // 
            this.Write("\n");
 // II - 1 Constructor 
 // 
            this.Write("  /*-------------------------------------------------------------------------*/\n " +
                    " /*--------------------------- Root Options -------------------------*/\n  /*----" +
                    "---------------------------------------------------------------------*/\n  \n  Cas" +
                    "eOptionsT");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("(CaseOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("* caseoptions)\n  {\n    m_caseoptions = caseoptions;\n");
 foreach(var complex in Xml.Complex.Where( p => !p.IsRef)) { 
            this.Write("    m_initialize_");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.Name.DashToUnderscore() ));
            this.Write(" = false;\n");
 } 
            this.Write("\t\n  }\n\t\n");
 //  Destructor 
            this.Write("  virtual ~CaseOptionsT");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("()\n  {\n");
 destructorSection(Xml, "	"); 
            this.Write("  }\n\n");
 // II - 2 Getters 
 // 
 getterSection(Xml, "  ", "m_caseoptions->"); 
            this.Write("\n");
 // II - 3 Data members 
 // 
            this.Write("private:\n\n  CaseOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("* m_caseoptions;\n");
 foreach(var complex in Xml.Complex.Where( p => !p.IsRef)) { 
	string complex_type =  "IOptions" + complex.type + "*"; 
            this.Write("  mutable bool m_initialize_");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.Name.DashToUnderscore() ));
            this.Write(";\n");
 if (complex.IsSingle == true) { 
            this.Write("  mutable ");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex_type ));
            this.Write(" m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.Name.DashToUnderscore() ));
            this.Write(";\n");
 } else if (complex.IsMulti == true) { 
            this.Write("  mutable ");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex_type.ToUniqueArrayType() ));
            this.Write(" m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.Name.DashToUnderscore() ));
            this.Write(";\n");
 } 
 } 
            this.Write("\n};\n\n/*--------------------------------------------------------------------------" +
                    "-*/\n/*--------------------------------------------------------------------------" +
                    "-*/\n\n#endif // ARCANE_CASEOPTIONST_");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName.ToUpper() ));
            this.Write("_H\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t");
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class CaseOptionsTBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
