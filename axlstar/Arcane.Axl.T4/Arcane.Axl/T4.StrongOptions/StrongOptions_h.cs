//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.28
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Arcane.Axl {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class StrongOptions_h : StrongOptions_hBase {
        
 
public int optionsCount(OptionHandler _xml) {
	return _xml.Simple.Count() + _xml.Enumeration.Count() 
						+ _xml.ServiceInstance.Count() + _xml.Complex.Where( p => !p.IsRef).Count(); 
}
public List<Xsd.Complex> complexWithOptions(OptionHandler _xml) {
	List<Xsd.Complex> retComplex = new List<Xsd.Complex>();
	foreach(var complex in _xml.FlatteningComplex.Where(p => !p.IsRef) ) {
		if(optionsCount(complex.Xml) > 0) {
			retComplex.Add(complex);
		}
	}
	return retComplex;
}
public bool fullDefault(OptionHandler _xml) {
	IEnumerable<Xsd.Option> nonComplexOptions = _xml.Simple.Cast<Xsd.Option> ();
    nonComplexOptions = nonComplexOptions.Union (_xml.Enumeration.Cast<Xsd.Option> ()); 
    nonComplexOptions = nonComplexOptions.Union (_xml.ServiceInstance.Cast<Xsd.Option> ()); 
	foreach(var option in nonComplexOptions) {
		if(!option.IsSingle && option.MinOccurs>0)
			return false;
		if (option.IsSingle && option.@default==null)
			return false;
	}
	bool isFullDefault = true;
	foreach(var complex in _xml.Complex.Where( p => !p.IsRef) ) {
		isFullDefault = isFullDefault && fullDefault(complex);
	}
	return isFullDefault;
}
public bool fullDefault(Xsd.Complex _complex) {
	if(!_complex.IsSingle)
	{
		if(_complex.MinOccurs==0) 
			return true;
		else 
			return false;
	}
	else
		return fullDefault(_complex.Xml);
}
// belle verrue en attendant ArcCore
public string stringFormat() {
	if(SimpleTypeExtensions.Namespace() == "Arcane")
		return "Arcane::String::format";
	else
		return SimpleTypeExtensions.Namespace() + "::format";
}

        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
 // -----------------------------------n 
 // I - External definition of option types 
 // -----------------------------------n 
  Action<OptionHandler, String, bool> optionsDeclarationSection = (OptionHandler _xml, String beginLineSpace, bool external) => { 
 foreach(var simple in _xml.Simple) { 
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("DECLARE_OPTION");
if(external){
            this.Write("_EXTERN");
}
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture( simple.Name.ToFuncName() ));
            this.Write(",");
            this.Write(this.ToStringHelper.ToStringWithCulture( simple.type.QualifiedName() ));
            this.Write(");");
if(!external){
            this.Write(" \\");
}
            this.Write("\n");
 } 
 foreach(var enumerator in _xml.Enumeration) { 
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("DECLARE_OPTION");
if(external){
            this.Write("_EXTERN");
}
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture( enumerator.Name.ToFuncName() ));
            this.Write(",");
            this.Write(this.ToStringHelper.ToStringWithCulture( enumerator.type ));
            this.Write(");");
if(!external){
            this.Write(" \\");
}
            this.Write("\n");
 } 
 foreach(var service in _xml.ServiceInstance) { 
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("DECLARE_OPTION");
if(external){
            this.Write("_EXTERN");
}
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture( service.Name.ToFuncName() ));
            this.Write(",std::shared_ptr<");
            this.Write(this.ToStringHelper.ToStringWithCulture( service.type ));
            this.Write(">);");
if(!external){
            this.Write(" \\");
}
            this.Write("\n");
 } 
 foreach(var complex in _xml.Complex.Where( p => !p.IsRef) ) { 
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("DECLARE_OPTION");
if(external){
            this.Write("_EXTERN");
}
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.Name.ToFuncName() ));
            this.Write(",std::shared_ptr<IOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("::IOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.type ));
            this.Write(">);");
if(!external){
            this.Write(" \\");
}
            this.Write("\n");
 } 
 }; 
 // -----------------------------------n 
 // II - Constructor section 
 // -----------------------------------n 
  Action<OptionHandler> checkTypeRestrictionSection = (OptionHandler _xml) => { 
 IEnumerable<Xsd.Option> allOptions = _xml.Simple.Cast<Xsd.Option> ();
    allOptions = allOptions.Union (_xml.Enumeration.Cast<Xsd.Option> ()); 
    allOptions = allOptions.Union (_xml.ServiceInstance.Cast<Xsd.Option> ()); 
    allOptions = allOptions.Union (_xml.Complex.Where( p => !p.IsRef).Cast<Xsd.Option> ());
    if (allOptions.Count() > 0) { 
     	var splitOptions= allOptions.Where((x,i) => i % 3 == 0).Select((x,i) => allOptions.Skip(i * 3).Take(3)); 
            this.Write("    OptionTools::checkRestriction<std::tuple<\n");
		foreach(var groupOption in splitOptions) { 
            this.Write("      ");
   foreach(var option in groupOption) { 
            this.Write(this.ToStringHelper.ToStringWithCulture( option.Name.ToFuncName() ));
            this.Write("_ ");
 if(option != allOptions.Last()){ 
            this.Write(",");
 } } 
            this.Write("\n");
	  } 
            this.Write("    >,Args...>(args...);\n ");
	} 
 }; 
 // -----------------------------------n 
 // III - Deserialized options section 
 // -----------------------------------n 
  Action<Xsd.Option, bool, String, bool> standardDeserializerSection = (Xsd.Option _option, bool hasDefault, String _option_default, bool problemStdArray) => { 
 	if (_option.IsSingle == true) { 
 		if (hasDefault) { 
            this.Write("    m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option.Name.DashToUnderscore() ));
            this.Write(" = ");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option_default ));
            this.Write(";\n    OptionTools::optionalSimple<");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option.Name.ToFuncName() ));
            this.Write("_, Args...>(m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option.Name.DashToUnderscore() ));
            this.Write(", std::move(args)...);\n");
 		} 
		else { 
			if(problemStdArray) { 
            this.Write("    static bool exist_");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option.Name.DashToUnderscore() ));
            this.Write(" = OptionTools::optionalSimple<");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option.Name.ToFuncName() ));
            this.Write("_, Args...>(m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option.Name.DashToUnderscore() ));
            this.Write(", std::move(args)...);\n    // todo replace by static assert\t\n    if(!exist_");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option.Name.DashToUnderscore() ));
            this.Write(")\n      throw ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SimpleTypeExtensions.Namespace()));
            this.Write("::FatalErrorException(A_FUNCINFO, \"missing required option ");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option.Name.ToFuncName() ));
            this.Write("\");\n");
			}
			else { 
            this.Write("\tm_");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option.Name.DashToUnderscore() ));
            this.Write(" = OptionTools::requiredFixedArray<");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option.Name.ToFuncName() ));
            this.Write("_, 1, Args...>(std::move(args)...)[0];\n");
          }
  	    }   
    } 
 	else { 
 		if (hasDefault) { 
            this.Write("//#warning \"Default for multi options not used\"\n");
 		} 
            this.Write("    m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option.Name.DashToUnderscore() ));
            this.Write(" = OptionTools::requiredVariableArray<");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option.Name.ToFuncName() ));
            this.Write("_, ");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option.MinOccurs ));
            this.Write(", -1, Args...>(std::move(args)...);\n");
 	} 
            this.Write("\n");
 }; 
  Action<OptionHandler> deserializedStrongOptionsSection = (OptionHandler _xml) => { 
 foreach(var simple in _xml.Simple) {
	bool hasDefault = simple.@default != null;
	bool isString = simple.type.ToString() == "string";
    string simple_default = (isString) ? simple.Default : simple.@default; 
	standardDeserializerSection(simple, hasDefault, simple_default, isString);
  } 
 // 
 foreach(var enumerator in _xml.Enumeration) {
	bool hasDefault = enumerator.@default != null;
	string enum_default = null;
 	foreach(var ee in enumerator.enumvalue)
 		if (ee.Name == enumerator.@default) enum_default = ee.genvalue;
 	standardDeserializerSection(enumerator, hasDefault, enum_default, false);
 } 
 // 
 foreach(var service in _xml.ServiceInstance) {
	bool hasDefault = service.@default != null;
 	string service_default = "std::move(InstanceBuilder<" + service.type +">::create("+ service.Default +"))";
 	standardDeserializerSection(service, hasDefault, service_default, true);
 } 
 // 
 foreach(var complex in _xml.Complex.Where( p => !p.IsRef) ) { 
   bool hasDefault = fullDefault(complex);
   string complex_default = "std::make_shared<StrongOptions" + complex.type + ">()";
   standardDeserializerSection(complex, hasDefault, complex_default, true);
   } 
 }; 
 // -----------------------------------n 
 // IV - Getter setter section 
 // -----------------------------------n 
  Action<Xsd.Option, String> dynamicMultiSetterSection = (Xsd.Option _option, String _option_type) => { 
            this.Write("  void ");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option.Name.ToFuncName()));
            this.Write("(std::list<");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option_type ));
            this.Write("> _");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option.Name.DashToUnderscore()));
            this.Write(") \n  {\n    auto input_size = _");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option.Name.DashToUnderscore()));
            this.Write(".size();\n");
 if (_option.MinOccurs > 0) { 
            this.Write("    if(input_size <");
            this.Write(this.ToStringHelper.ToStringWithCulture(_option.MinOccurs.ToString()));
            this.Write(")\n      throw ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SimpleTypeExtensions.Namespace()));
            this.Write("::FatalErrorException(A_FUNCINFO, \"illegal option (no conformity with axl) list s" +
                    "ize < ");
            this.Write(this.ToStringHelper.ToStringWithCulture(_option.MinOccurs.ToString()));
            this.Write("\");\n");
 } 
 if (_option.maxOccurs != "unbounded") { 
            this.Write("    if(input_size >");
            this.Write(this.ToStringHelper.ToStringWithCulture(_option.MaxOccurs.ToString()));
            this.Write(")\n      throw ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SimpleTypeExtensions.Namespace()));
            this.Write("::FatalErrorException(A_FUNCINFO, \"illegal option (no conformity with axl) list s" +
                    "ize > ");
            this.Write(this.ToStringHelper.ToStringWithCulture(_option.MaxOccurs.ToString()));
            this.Write("\");\n");
 } 
            this.Write("    m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option.Name.DashToUnderscore() ));
            this.Write(".resize(input_size);\n    int i = 0;\n    for(auto iter : _");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option.Name.DashToUnderscore()));
            this.Write(")\n      m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option.Name.DashToUnderscore() ));
            this.Write("[i++] = iter; \n  }\n\n");
 }; 
  Action<Xsd.Option, String> multiSharedPtrGetterSection = (Xsd.Option _option, String _option_type) => { 
 string field_name = "m_"+ _option.Name.DashToUnderscore();
            this.Write("  ");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option_type.ToArrayType() ));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option.Name.ToFuncName() ));
            this.Write("() const \n  {\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option_type.ToUniqueArrayType() ));
            this.Write(" ret_array(");
            this.Write(this.ToStringHelper.ToStringWithCulture( field_name ));
            this.Write(".size());\n    int i = 0;\n    for(auto iter=");
            this.Write(this.ToStringHelper.ToStringWithCulture( field_name ));
            this.Write(".begin();iter!=");
            this.Write(this.ToStringHelper.ToStringWithCulture( field_name ));
            this.Write(".end();++iter)\n      ret_array[i++] = iter->get();\n  \treturn ret_array;\n  }\n\n");
 }; 
 Action<Xsd.Option, String> simpleEnumAccessoreAction = (Xsd.Option _option, String _option_type) => { 
		if (_option.IsSingle == true) { 
            this.Write("  ");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option_type ));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option.Name.ToFuncName() ));
            this.Write("() const\n  {\n    return m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option.Name.DashToUnderscore() ));
            this.Write(";\n  }\n\n  void ");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option.Name.ToFuncName()));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option_type ));
            this.Write(" _");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option.Name.DashToUnderscore()));
            this.Write(") \n  { \n    m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option.Name.DashToUnderscore() ));
            this.Write(" = _");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option.Name.DashToUnderscore() ));
            this.Write("; \n  }\n");
	} else {
            this.Write("  ");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option_type.ToArrayType() ));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option.Name.ToFuncName() ));
            this.Write("() const\n  { \n    return m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( _option.Name.DashToUnderscore() ));
            this.Write(";\n  }\n\n");
 dynamicMultiSetterSection(_option, _option_type); 
 } 
 }; 
  Action<OptionHandler, String> getterSection = (OptionHandler _xml, String _className) => { 
 foreach(var simple in _xml.Simple)
	simpleEnumAccessoreAction(simple, simple.type.QualifiedName()); 
 // 
 foreach(var enumerator in _xml.Enumeration) 
	simpleEnumAccessoreAction(enumerator, enumerator.type); 
 // 
 foreach(var service in _xml.ServiceInstance) {
  if (service.IsSingle == true) { 
            this.Write("  ");
            this.Write(this.ToStringHelper.ToStringWithCulture( service.type ));
            this.Write("* ");
            this.Write(this.ToStringHelper.ToStringWithCulture( service.Name.ToFuncName() ));
            this.Write("() const\n  {\n    return m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( service.Name.DashToUnderscore()));
            this.Write(".get(); \n  }\n  \n  void ");
            this.Write(this.ToStringHelper.ToStringWithCulture( service.Name.ToFuncName()));
            this.Write("(std::shared_ptr<");
            this.Write(this.ToStringHelper.ToStringWithCulture( service.type ));
            this.Write(">  _");
            this.Write(this.ToStringHelper.ToStringWithCulture( service.Name.DashToUnderscore()));
            this.Write(") \n  {\n    m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( service.Name.DashToUnderscore() ));
            this.Write(" = _");
            this.Write(this.ToStringHelper.ToStringWithCulture( service.Name.DashToUnderscore() ));
            this.Write(";\n  }\n\n");
 } else {
	multiSharedPtrGetterSection(service, service.type + "*");
	dynamicMultiSetterSection(service, "std::shared_ptr<"+service.type+">");
 	} 
} 
 // 
 foreach(var complex in _xml.Complex.Where( p => !p.IsRef) ) {
	string complex_type = "IOptions" + Xml.ClassName + "::IOptions"+complex.type;
 if (complex.IsSingle == true) { 
            this.Write("  const ");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex_type ));
            this.Write("& ");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.Name.ToFuncName() ));
            this.Write("() const\n  {\n    return *m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.Name.DashToUnderscore() ));
            this.Write(".get(); \n  }\n  \n  void ");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.Name.ToFuncName()));
            this.Write("(std::shared_ptr<");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex_type ));
            this.Write("> _");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.Name.DashToUnderscore()));
            this.Write(") \n  {\n    m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.Name.DashToUnderscore() ));
            this.Write(" = _");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.Name.DashToUnderscore() ));
            this.Write(";\n  }\n\n");
} else { 
	multiSharedPtrGetterSection(complex, complex_type + "*");
	dynamicMultiSetterSection(complex, "std::shared_ptr<"+complex_type+">"); 
  } 
 } 
 }; 
 // -----------------------------------n 
 // VI - Members declaration section 
 // -----------------------------------n 
  Action<OptionHandler> memberDeclarationSection = (OptionHandler _xml) => { 
 foreach(var simple in _xml.Simple) {
	string option_type = simple.IsSingle ? simple.type.QualifiedName() : simple.type.QualifiedName().ToUniqueArrayType(); 
            this.Write("  ");
            this.Write(this.ToStringHelper.ToStringWithCulture( option_type ));
            this.Write(" m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( simple.Name.DashToUnderscore() ));
            this.Write(";\n");
 } 
 foreach(var enumerator in _xml.Enumeration) {
	string option_type = enumerator.IsSingle ? enumerator.type : enumerator.type.ToUniqueArrayType(); 
            this.Write("  ");
            this.Write(this.ToStringHelper.ToStringWithCulture( option_type ));
            this.Write(" m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( enumerator.Name.DashToUnderscore() ));
            this.Write(";\n");
 } 
 foreach(var service in _xml.ServiceInstance) {
	string option_type_single = "std::shared_ptr<"+service.type+">";
	string option_type = service.IsSingle ? option_type_single : option_type_single.ToUniqueArrayType(); 
            this.Write("  ");
            this.Write(this.ToStringHelper.ToStringWithCulture( option_type ));
            this.Write(" m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( service.Name.DashToUnderscore() ));
            this.Write(";\n");
 } 
 foreach(var complex in _xml.Complex.Where( p => !p.IsRef) ) {
	string option_type_single = "std::shared_ptr<IOptions" + Xml.ClassName + "::IOptions"+complex.type+">";
	string option_type = complex.IsSingle ? option_type_single : option_type_single.ToUniqueArrayType(); 
            this.Write("  ");
            this.Write(this.ToStringHelper.ToStringWithCulture( option_type ));
            this.Write(" m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.Name.DashToUnderscore() ));
            this.Write(";\n");
 } 
 }; 
            this.Write("\n");
  Action<OptionHandler, String, String> StrongClassMainSection = (OptionHandler _xml, String className, String motherInterfaceName) => { 
if(optionsCount(_xml)> 0) { 
            this.Write("namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture( className ));
            this.Write("OptionsNames\n{\n  using namespace StrongOptions;\n");
 optionsDeclarationSection(_xml,"  ", true);  
            this.Write("}\n");
 } 
            this.Write("class StrongOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( className ));
            this.Write(" : public ");
            this.Write(this.ToStringHelper.ToStringWithCulture( motherInterfaceName ));
            this.Write("\n{\npublic:\n\n");
 // II - 1 Constructor 
 // 
            this.Write("  template<typename... Args>\n  StrongOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( className ));
            this.Write("(Args&&... args)\n  {\n");
 if(optionsCount(_xml) > 0) { 
            this.Write("    using namespace StrongOptions;\n    using namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture( className ));
            this.Write("OptionsNames;\n\n");
 checkTypeRestrictionSection(_xml);  
            this.Write("\n");
 deserializedStrongOptionsSection(_xml);  
 } 
            this.Write("  }\n\n");
 //  Destructor 
            this.Write("  virtual ~StrongOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( className ));
            this.Write("(){}\t\n\n");
 // II - 2 Getters 
 // 
            this.Write("  const StrongOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( className ));
            this.Write("* operator->() const { return this; }\n\n");
 getterSection(_xml, "StrongOptions" + className);  
            this.Write("\nprivate:\n\n");
 // II - 3 Declaration of data members 
 // 
 memberDeclarationSection(_xml);  
            this.Write("\n};\n");
 }; 
            this.Write("/*---------------------------------------------------------------------------*/\n/" +
                    "*---------------------------------------------------------------------------*/\n/" +
                    "/ #WARNING#: This file has been generated automatically. Do not edit.\n// Arcane " +
                    "version ");
            this.Write(this.ToStringHelper.ToStringWithCulture( Version ));
            this.Write(" : ");
            this.Write(this.ToStringHelper.ToStringWithCulture( DateTime.Now ));
            this.Write("\n/*---------------------------------------------------------------------------*/\n" +
                    "/*---------------------------------------------------------------------------*/\n" +
                    "\n#ifndef ARCANE_STRONGOPTIONS_");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.CppHeaderGuardName ));
            this.Write("_H\n#define ARCANE_STRONGOPTIONS_");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.CppHeaderGuardName ));
            this.Write("_H\n\n/*---------------------------------------------------------------------------" +
                    "*/\n/*---------------------------------------------------------------------------" +
                    "*/\n\n#include \"");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("_IOptions.h\"\n");
 if(WithArcane) { 
            this.Write("#include \"arcane/ServiceOptions.h\"\n");
 } 
            this.Write("#include <list>\n/*---------------------------------------------------------------" +
                    "------------*/\n/*---------------------------------------------------------------" +
                    "------------*/\n\n");
 // I Complex options 
 // 
            this.Write("namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("OptionsNames\n{\n");
 foreach(var complex in Xml.FlatteningComplex.Where(p => !p.IsRef) ) { 
	StrongClassMainSection(complex.Xml, complex.type, "IOptions"+ Xml.ClassName + "::IOptions"+ complex.type);
} 
            this.Write("}\n/*---------------------------------------------------------------------------*/" +
                    "\n/*---------------------------------------------------------------------------*/" +
                    "\n");
 StrongClassMainSection(Xml, Xml.ClassName, "IOptions"+ Xml.ClassName);  
            this.Write("/*---------------------------------------------------------------------------*/\n/" +
                    "*---------------------------------------------------------------------------*/\n\n" +
                    "\n#endif // ARCANE_STRONGOPTIONS_");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName.ToUpper() ));
            this.Write("_H\n\n");
 // I - Marco for External definition of option types call by service implementatation 
            this.Write("\n#define REGISTER_STRONG_OPTIONS_");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName.ToUpper() ));
            this.Write("()");
if(optionsCount(Xml) > 0) { 
            this.Write(" \\\nnamespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("OptionsNames{ \\\n  using namespace StrongOptions; \\\n");
 optionsDeclarationSection(Xml, "  ", false);  
 foreach(var complex in complexWithOptions(Xml) ) { 
            this.Write("  namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.type ));
            this.Write("OptionsNames{ \\\n");
 optionsDeclarationSection(complex.Xml, "    ", false);  
            this.Write("  } \\\n");
 } 
            this.Write("}\n");
 } 
            this.Write("\n");
 // II - Marco for register service instance call by service implementatation 
 if(fullDefault(Xml)) { 
            this.Write("#define REGISTER_INSTANCE_");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName.ToUpper() ));
            this.Write("(instance_name, service_name, interface_name) \\\ntemplate <> std::unique_ptr<Insta" +
                    "nceBuilder<interface_name>> InstanceBuilder<interface_name>::m_instance = NULL; " +
                    "\\\nnamespace { InstanceRegisterer<interface_name, service_name, StrongOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("> ARCANE_JOIN_WITH_LINE(Registerer_)(#instance_name); }\t\n");
 } else { 
            this.Write("#define REGISTER_INSTANCE_");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName.ToUpper() ));
            this.Write("(instance_name, service_name, interface_name) \\\nstatic_assert(false,\"Impossible t" +
                    "o register ");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write(" instance because some options have no default\")\n");
 } 
            this.Write("\n#define USING_NAMESPACES_");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName.ToUpper() ));
            this.Write("()");
if(optionsCount(Xml) > 0) { 
            this.Write(" \\\nusing namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("OptionsNames; \\\n");
 var complexWithOpt = complexWithOptions(Xml);
foreach(var complex in complexWithOpt ) { 
            this.Write("using namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.type ));
            this.Write("OptionsNames");
 if(complex != complexWithOpt.Last() ) { 
            this.Write("; \\\n");
 } 
 } 
 } 
            this.Write("\n");
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class StrongOptions_hBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
