//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.28
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Arcane.Axl {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class IOptions : IOptionsBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            this.Write("\n");
  Action<OptionHandler, String> bodySection = (OptionHandler _xml, String beginLineSpace) => { 
 // 
 foreach(var simple in _xml.Simple) {
	string return_type = simple.type.QualifiedName();
	if (simple.IsSingle == false) {
		return_type = return_type.ToArrayType();
	} 
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("virtual ");
            this.Write(this.ToStringHelper.ToStringWithCulture( return_type ));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture( simple.Name.ToFuncName() ));
            this.Write("() const = 0;\n");
 } 
 // 
 foreach(var enumerator in _xml.Enumeration) {
	string return_type = enumerator.type;
	if (enumerator.IsSingle == false) {
		return_type = return_type.ToArrayType();
	} 
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("virtual ");
            this.Write(this.ToStringHelper.ToStringWithCulture( return_type ));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture( enumerator.Name.ToFuncName() ));
            this.Write("() const = 0;\n");
 } 
 // 
 foreach(var service in _xml.ServiceInstance) {
	string return_type = service.type + "*";
	if (service.IsSingle == false) {
		return_type = return_type.ToArrayType();
	} 
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("virtual ");
            this.Write(this.ToStringHelper.ToStringWithCulture( return_type ));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture( service.Name.ToFuncName() ));
            this.Write("() const = 0;\n");
 } 
 // 
 foreach(var complex in _xml.Complex.Where( p => !p.IsRef) ) {
	string return_type;
	if (complex.IsSingle == true)
		return_type = "const IOptions" + complex.type + "&";
	else {
		return_type = "IOptions" + complex.type + "*";
		return_type = return_type.ToArrayType();
	} 
            this.Write(this.ToStringHelper.ToStringWithCulture(beginLineSpace));
            this.Write("virtual ");
            this.Write(this.ToStringHelper.ToStringWithCulture( return_type ));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.Name.ToFuncName() ));
            this.Write("() const = 0;\n");
 } 
 }; 
            this.Write("\n/*---------------------------------------------------------------------------*/\n" +
                    "/*---------------------------------------------------------------------------*/\n" +
                    "// #WARNING#: This file has been generated automatically. Do not edit.\n// Arcane" +
                    " version ");
            this.Write(this.ToStringHelper.ToStringWithCulture( Version ));
            this.Write(" : ");
            this.Write(this.ToStringHelper.ToStringWithCulture( DateTime.Now ));
            this.Write("\n/*---------------------------------------------------------------------------*/\n" +
                    "/*---------------------------------------------------------------------------*/\n" +
                    "\n#ifndef ARCANE_IOPTIONS_");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.CppHeaderGuardName ));
            this.Write("_H\n#define ARCANE_IOPTIONS_");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.CppHeaderGuardName ));
            this.Write("_H\n\n/*---------------------------------------------------------------------------" +
                    "*/\n/*---------------------------------------------------------------------------" +
                    "*/\n\n");
 if(WithArcane) { 
            this.Write("#include \"arcane/VariableTypes.h\"\n");
 } 
            this.Write("\n/*---------------------------------------------------------------------------*/\n" +
                    "/*---------------------------------------------------------------------------*/\n" +
                    "\n");
 var non_ref_complex = Xml.FlatteningComplex.Where(p => !p.IsRef); 
            this.Write("class IOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("\n{\npublic:\n\n");
 // I - Complex Options Definition 
 // 
 foreach(var complex in non_ref_complex ) { 
            this.Write("  class IOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.type ));
            this.Write("\n  {\n  public:\n");
 // 
 // I - Complex Options 
 bodySection(complex.Xml, "    "); 
            this.Write("    virtual ~IOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.type ));
            this.Write("() {}\n  };\n\n");
 } 
 // II - Main service options 
 // 
            this.Write("  virtual ~IOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("() {}\n");
 // 
 bodySection(Xml, "  "); 
            this.Write("\n};\n\n/*--------------------------------------------------------------------------" +
                    "-*/\n/*--------------------------------------------------------------------------" +
                    "-*/\n\n#endif // ARCANE_IOPTIONS_");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName.ToUpper() ));
            this.Write("_H");
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class IOptionsBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
