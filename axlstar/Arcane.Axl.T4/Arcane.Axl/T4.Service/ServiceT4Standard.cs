//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.16
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Arcane.Axl {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class ServiceT4Standard : ServiceT4StandardBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            this.Write("/*---------------------------------------------------------------------------*/\n/" +
                    "*---------------------------------------------------------------------------*/\n/" +
                    "/ #WARNING#: This file has been generated automatically. Do not edit.\n// Arcane " +
                    "version ");
            this.Write(this.ToStringHelper.ToStringWithCulture( Version ));
            this.Write(" : ");
            this.Write(this.ToStringHelper.ToStringWithCulture( DateTime.Now ));
            this.Write("\n/*---------------------------------------------------------------------------*/\n" +
                    "/*---------------------------------------------------------------------------*/\n" +
                    "\n#ifndef ARCANE_MODULE_");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName.ToUpper() ));
            this.Write("_H\n#define ARCANE_MODULE_");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName.ToUpper() ));
            this.Write(@"_H

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#include ""arcane/VariableTypes.h""
#include ""arcane/ServiceInfo.h""
#include ""arcane/ISubDomain.h""
#include ""arcane/ServiceBuildInfo.h""
#include ""arcane/ServiceFactory.h""
#include ""arcane/ServiceRegisterer.h""
#include ""arcane/BasicService.h""
");
  if (Service.HasTests) { 
            this.Write("#include \"arcane/UnitTestServiceAdapter.h\"\n");
  } 
  if (Service.HasMultiDimVariable) { 
            this.Write("#include \"arcane/MeshMDVariableRef.h\"\n");
  } 
            this.Write(@"
#ifndef ARCANE_HAS_SPECIFIC_BASIC_SERVICE
// Code pour les versions de Arcane avant la 3.8 qui ne possèdent pas les
// classes de base spécifiques pour les services
namespace Arcane
{
using BasicCaseOptionService = BasicService;
using BasicSubDomainService = BasicService;
using BasicMeshService = BasicService;
}
#endif

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
");
  if (Xml.LesserThanVersionOne) { 
            this.Write("\nnamespace Arcane\n{\n \n/*---------------------------------------------------------" +
                    "------------------*/\n/*---------------------------------------------------------" +
                    "------------------*/\n");
  }
	if(Xml.NamespaceMacroName != null) { 
            this.Write("\n");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.NamespaceMacroName ));
            this.Write("_BEGIN_NAMESPACE\n\n/*-------------------------------------------------------------" +
                    "--------------*/\n/*-------------------------------------------------------------" +
                    "--------------*/\n");
  } 
    if(Xml.NamespaceName != null) { 
            this.Write("\nnamespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.NamespaceName ));
            this.Write(" {\n\n/*---------------------------------------------------------------------------" +
                    "*/\n/*---------------------------------------------------------------------------" +
                    "*/\n");
  } 
            this.Write("\nclass CaseOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write(";\n\n/*---------------------------------------------------------------------------*" +
                    "/\n/*---------------------------------------------------------------------------*" +
                    "/\n\n//! Generation de la classe de base du Service\nclass Arcane");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("Object\n  : public ");
            this.Write(this.ToStringHelper.ToStringWithCulture( Service.ParentName ));
            this.Write("\n");
	if(Service.HasTests) { 
            this.Write("  , public Arcane::UnitTestServiceAdapter<Arcane");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("Object>\n");
	} 
	foreach(var i in Service.InheritedInterfaces) { 
            this.Write("  , public ");
            this.Write(this.ToStringHelper.ToStringWithCulture( i.name ));
            this.Write("\n");
	} 
            this.Write("{\npublic:\n  // NOTE GG: attention code dupliqué avec \'ServiceT4CaseAndStrong\'. Bi" +
                    "en reporter les modifications\n  template <typename ServiceClassType> static void" +
                    " fillServiceInfo(Arcane::ServiceInfo* si)\n  {\n    si->setCaseOptionsFileName(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
    if(!String.IsNullOrEmpty(Path)){
            this.Write("_");
            this.Write(this.ToStringHelper.ToStringWithCulture( Path.Replace("/","_") ));
    }
            this.Write("\");\n    si->setAxlVersion(");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.Version ));
            this.Write(");\n    si->setDefaultTagName(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName.ToLowerWithDash () ));
            this.Write("\");\n    si->setAxlContent(getAxlContent());\n");
  foreach(var n in Service.Names) { 
            this.Write("    si->setTagName(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture( n.Value ));
            this.Write("\",\"");
            this.Write(this.ToStringHelper.ToStringWithCulture( n.lang ));
            this.Write("\");\n");
  } 
            this.Write("    Arcane::ServiceAllInterfaceRegisterer<ServiceClassType>::registerToServiceInf" +
                    "o(si\n");
	foreach(var i in Service.Interfaces) { 
            this.Write("    ,ARCANE_SERVICE_INTERFACE(");
            this.Write(this.ToStringHelper.ToStringWithCulture( i.name ));
            this.Write(")\n");
	} 
	if(Service.HasTests) { 
            this.Write("\t  ,ARCANE_SERVICE_INTERFACE(Arcane::IXmlUnitTest)\n");
	} 
            this.Write(");\n  }\n  \npublic:\n\n  //! Constructeur\n  Arcane");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("Object(const Arcane::ServiceBuildInfo& sbi)\n    : ");
            this.Write(this.ToStringHelper.ToStringWithCulture( Service.ParentName ));
            this.Write("(sbi)\n");
	if(Service.HasTests) { 
            this.Write("    , Arcane::UnitTestServiceAdapter<Arcane");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("Object>(this)\n");
	} 
            this.Write("    , m_options(nullptr)\n");
  foreach(var v in Service.Variables) { 
            this.Write("    , m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( v.fieldname ));
            this.Write("(Arcane::VariableBuildInfo(sbi.meshHandle(), \"");
            this.Write(this.ToStringHelper.ToStringWithCulture( v.name ));
            this.Write("\"");

    if (v.HasFamilyName) { 
            this.Write(", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture( v.FamilyName ));
            this.Write("\" ");
 } 
            this.Write(" ");

      if(v.NbProperty > 0) { 
    
            this.Write(", Arcane::IVariable::P");
            this.Write(this.ToStringHelper.ToStringWithCulture( v.FirstProperty.ToString () ));
 
        foreach(var p in v.OthersProperties) {
    
            this.Write("| Arcane::IVariable::P");
            this.Write(this.ToStringHelper.ToStringWithCulture( p.ToString () ));

        } 
      } 
            this.Write("))\n");
  } 
            this.Write("  {\n");
  if(Service.IsNotCaseOption) { 
            this.Write("    m_options = new CaseOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("(sbi.subDomain()->caseMng());\n");
  } else { 
            this.Write("    Arcane::ICaseOptions* co = sbi.caseOptions();\n    if (co) {\n      m_options =" +
                    " new CaseOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("(co);\n    }\n");
	}

    if(Service.HasTests) { 
 	  if (!String.IsNullOrEmpty(Service.tests.classsetup)) { 
            this.Write("    setClassSetUpFunction(&Arcane");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("Object::");
            this.Write(this.ToStringHelper.ToStringWithCulture( Service.tests.classsetup ));
            this.Write(");\n");
    }
      if (!String.IsNullOrEmpty(Service.tests.classteardown)) { 
            this.Write(" \n    setClassTearDownFunction(&Arcane");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("Object::");
            this.Write(this.ToStringHelper.ToStringWithCulture( Service.tests.classteardown ));
            this.Write(");\n");
    }
      if (!String.IsNullOrEmpty(Service.tests.testsetup)) { 
            this.Write("    setTestSetUpFunction(&Arcane");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("Object::");
            this.Write(this.ToStringHelper.ToStringWithCulture( Service.tests.testsetup ));
            this.Write(");\n");
    }
      if (!String.IsNullOrEmpty(Service.tests.testteardown)) { 
            this.Write("    setTestTearDownFunction(&Arcane");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("Object::");
            this.Write(this.ToStringHelper.ToStringWithCulture( Service.tests.testteardown ));
            this.Write(");\n");
    } 
      foreach(var t in Service.tests.Tests) { 
            this.Write("    addTestFunction(&Arcane");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("Object::");
            this.Write(this.ToStringHelper.ToStringWithCulture( t.methodname ));
            this.Write(", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture( t.name ));
            this.Write("\", \"");
            this.Write(this.ToStringHelper.ToStringWithCulture( t.methodname ));
            this.Write("\");\n");
    } 
    } 
            this.Write("\t\n  }\n\n  //! Destructeur\n  virtual ~Arcane");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("Object()\n  {\n    delete m_options;\n  }\n\n");
	if(Service.HasTests) { 
            this.Write("public:\n\n    //! Méthodes de test\\n\");\n");
    if (!String.IsNullOrEmpty(Service.tests.classsetup)) { 
            this.Write("  virtual void ");
            this.Write(this.ToStringHelper.ToStringWithCulture( Service.tests.classsetup ));
            this.Write("() = 0;\n");
    }
      if (!String.IsNullOrEmpty(Service.tests.classteardown)) { 
            this.Write(" \n  virtual void ");
            this.Write(this.ToStringHelper.ToStringWithCulture( Service.tests.classteardown ));
            this.Write("() = 0;\n");
    }
      if (!String.IsNullOrEmpty(Service.tests.testsetup)) { 
            this.Write("  virtual void ");
            this.Write(this.ToStringHelper.ToStringWithCulture( Service.tests.testsetup ));
            this.Write("() = 0;\n");
    }
      if (!String.IsNullOrEmpty(Service.tests.testteardown)) { 
            this.Write("  virtual void ");
            this.Write(this.ToStringHelper.ToStringWithCulture( Service.tests.testteardown ));
            this.Write("() = 0;\n");
    }
      foreach(var t in Service.tests.Tests) { 
            this.Write("  virtual void ");
            this.Write(this.ToStringHelper.ToStringWithCulture( t.methodname ));
            this.Write("() = 0;  //!< ");
            this.Write(this.ToStringHelper.ToStringWithCulture( t.name ));
            this.Write("\n");
    } 
    } 
            this.Write("\npublic:\n\n  //! Options du jeu de données du service\n  CaseOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("* options() const { return m_options; }\n \nprivate:\n        \n  //! Options du jeu " +
                    "de données du service\n  CaseOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("* m_options;\n      \nprotected:\n\n  //! Variables du service\n");
  foreach(var v in Service.Variables) { 
      if(v.IsInFlow) { 
            this.Write("  const ");
            this.Write(this.ToStringHelper.ToStringWithCulture( v.QualifiedClassName ));
            this.Write(" m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( v.fieldname ));
            this.Write(";\n");
    } else { 
            this.Write("  ");
            this.Write(this.ToStringHelper.ToStringWithCulture( v.QualifiedClassName ));
            this.Write(" m_");
            this.Write(this.ToStringHelper.ToStringWithCulture( v.fieldname ));
            this.Write(";\n");
    }
    } 
            this.Write("private:\n  static Arcane::FileContent getAxlContent()\n {\n   const Arcane::Byte* c" +
                    "ontent = (const Arcane::Byte*)\"");
            this.Write(this.ToStringHelper.ToStringWithCulture( Service.AxlContent.Content));
            this.Write("\";\n   Arcane::Span<const Arcane::Byte> bytes(content,");
            this.Write(this.ToStringHelper.ToStringWithCulture( Service.AxlContent.Length));
            this.Write(");\n   int file_version = 1;\n   return Arcane::FileContent(bytes,file_version,\"");
            this.Write(this.ToStringHelper.ToStringWithCulture( Service.AxlContent.Compression));
            this.Write("\");\n }\n};\n\n/*--------------------------------------------------------------------" +
                    "-------*/\n/*--------------------------------------------------------------------" +
                    "-------*/\n\n#define ARCANE_REGISTER_SERVICE_");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName.ToUpper () ));
            this.Write("(service_name,class_name) \\\n  ARCANE_REGISTER_AXL_SERVICE(class_name,Arcane::Serv" +
                    "iceProperty(#service_name,");
            this.Write(this.ToStringHelper.ToStringWithCulture( Service.TypesToArcaneNames () ));
            this.Write(",\\\n  ");
 if (Service.IsSingleton) { 
            this.Write(" Arcane::SFP_Singleton ");
 } else { 
            this.Write(" Arcane::SFP_None ");
 } 
            this.Write("))\n  \n/*-------------------------------------------------------------------------" +
                    "--*/\n/*-------------------------------------------------------------------------" +
                    "--*/\n");
  if(Xml.NamespaceMacroName != null) { 
            this.Write("\n");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.NamespaceMacroName ));
            this.Write("_END_NAMESPACE\n\n/*---------------------------------------------------------------" +
                    "------------*/\n/*---------------------------------------------------------------" +
                    "------------*/\n");
  } 
    if(Xml.NamespaceName != null) { 
            this.Write("\n}\n\n/*---------------------------------------------------------------------------" +
                    "*/\n/*---------------------------------------------------------------------------" +
                    "*/\n");
  } 
  	if (Xml.LesserThanVersionOne) { 
            this.Write("\n} // End namespace Arcane\n \n/*--------------------------------------------------" +
                    "-------------------------*/\n/*--------------------------------------------------" +
                    "-------------------------*/\n");
  } 
            this.Write("\n#endif\n");
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class ServiceT4StandardBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
