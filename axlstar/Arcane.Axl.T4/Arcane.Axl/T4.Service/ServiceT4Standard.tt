<#@ template language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
// #WARNING#: This file has been generated automatically. Do not edit.
// Arcane version <#= Version #> : <#= DateTime.Now #>
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#ifndef ARCANE_MODULE_<#= Xml.ClassName.ToUpper() #>_H
#define ARCANE_MODULE_<#= Xml.ClassName.ToUpper() #>_H

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#include "arcane/VariableTypes.h"
#include "arcane/ServiceInfo.h"
#include "arcane/ISubDomain.h"
#include "arcane/ServiceBuildInfo.h"
#include "arcane/ServiceFactory.h"
#include "arcane/ServiceRegisterer.h"
#include "arcane/BasicService.h"
<#  if (Service.HasTests) { #>
#include "arcane/UnitTestServiceAdapter.h"
<#  } #>
<#  if (Service.HasMultiDimVariable) { #>
#include "arcane/MeshMDVariableRef.h"
<#  } #>

#ifndef ARCANE_HAS_SPECIFIC_BASIC_SERVICE
// Code pour les versions de Arcane avant la 3.8 qui ne possèdent pas les
// classes de base spécifiques pour les services
namespace Arcane
{
using BasicCaseOptionService = BasicService;
using BasicSubDomainService = BasicService;
using BasicMeshService = BasicService;
}
#endif

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
<#  if (Xml.LesserThanVersionOne) { #>

namespace Arcane
{
 
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
<#  }
	if(Xml.NamespaceMacroName != null) { #>

<#= Xml.NamespaceMacroName #>_BEGIN_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
<#  } 
    if(Xml.NamespaceName != null) { #>

namespace <#= Xml.NamespaceName #> {

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
<#  } #>

class CaseOptions<#= Xml.ClassName #>;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

//! Generation de la classe de base du Service
class Arcane<#= Xml.ClassName #>Object
  : public <#= Service.ParentName #>
<#	if(Service.HasTests) { #>
  , public Arcane::UnitTestServiceAdapter<Arcane<#= Xml.ClassName #>Object>
<#	} 
	foreach(var i in Service.InheritedInterfaces) { #>
  , public <#= i.name #>
<#	} #>
{
public:
  // NOTE GG: attention code dupliqué avec 'ServiceT4CaseAndStrong'. Bien reporter les modifications
  template <typename ServiceClassType> static void fillServiceInfo(Arcane::ServiceInfo* si)
  {
    si->setCaseOptionsFileName("<#= Xml.ClassName #><# if(!String.IsNullOrEmpty(Path)) { #>_<#= Path.Replace("/","_") #><# } #>");
    si->setAxlVersion(<#= Xml.Version #>);
    si->setDefaultTagName("<#= Xml.ClassName.ToLowerWithDash () #>");
    si->setAxlContent(getAxlContent());
<#  foreach(var n in Service.Names) { #>
    si->setTagName("<#= n.Value #>","<#= n.lang #>");
<#  } #>
    Arcane::ServiceAllInterfaceRegisterer<ServiceClassType>::registerToServiceInfo(si
<#	foreach(var i in Service.Interfaces) { #>
    ,ARCANE_SERVICE_INTERFACE(<#= i.name #>)
<#	} #>
<#	if(Service.HasTests) { #>
	  ,ARCANE_SERVICE_INTERFACE(Arcane::IXmlUnitTest)
<#	} #>);
  }
  
public:

  //! Constructeur
  Arcane<#= Xml.ClassName #>Object(const Arcane::ServiceBuildInfo& sbi)
    : <#= Service.ParentName #>(sbi)
<#	if(Service.HasTests) { #>
    , Arcane::UnitTestServiceAdapter<Arcane<#= Xml.ClassName #>Object>(this)
<#	} #>
    , m_options(nullptr)
<#  foreach(var v in Service.Variables) { #>
    , m_<#= v.fieldname #>(Arcane::VariableBuildInfo(sbi.meshHandle(), "<#= v.name #>"<#
    if (v.HasFamilyName) { #>, "<#= v.FamilyName #>" <# } #> <#
      if(v.NbProperty > 0) { 
    #>, Arcane::IVariable::P<#= v.FirstProperty.ToString () #><# 
        foreach(var p in v.OthersProperties) {
    #>| Arcane::IVariable::P<#= p.ToString () #><#
        } 
      } #>))
<#  } #>
  {
<#  if(Service.IsNotCaseOption) { #>
    m_options = new CaseOptions<#= Xml.ClassName #>(sbi.subDomain()->caseMng());
<#  } else { #>
    Arcane::ICaseOptions* co = sbi.caseOptions();
    if (co) {
      m_options = new CaseOptions<#= Xml.ClassName #>(co);
    }
<#	}

    if(Service.HasTests) { 
 	  if (!String.IsNullOrEmpty(Service.tests.classsetup)) { #>
    setClassSetUpFunction(&Arcane<#= Xml.ClassName #>Object::<#= Service.tests.classsetup #>);
<#    }
      if (!String.IsNullOrEmpty(Service.tests.classteardown)) { #> 
    setClassTearDownFunction(&Arcane<#= Xml.ClassName #>Object::<#= Service.tests.classteardown #>);
<#    }
      if (!String.IsNullOrEmpty(Service.tests.testsetup)) { #>
    setTestSetUpFunction(&Arcane<#= Xml.ClassName #>Object::<#= Service.tests.testsetup #>);
<#    }
      if (!String.IsNullOrEmpty(Service.tests.testteardown)) { #>
    setTestTearDownFunction(&Arcane<#= Xml.ClassName #>Object::<#= Service.tests.testteardown #>);
<#    } 
      foreach(var t in Service.tests.Tests) { #>
    addTestFunction(&Arcane<#= Xml.ClassName #>Object::<#= t.methodname #>, "<#= t.name #>", "<#= t.methodname #>");
<#    } 
    } #>	
  }

  //! Destructeur
  virtual ~Arcane<#= Xml.ClassName #>Object()
  {
    delete m_options;
  }

<#	if(Service.HasTests) { #>
public:

    //! Méthodes de test\n");
<#    if (!String.IsNullOrEmpty(Service.tests.classsetup)) { #>
  virtual void <#= Service.tests.classsetup #>() = 0;
<#    }
      if (!String.IsNullOrEmpty(Service.tests.classteardown)) { #> 
  virtual void <#= Service.tests.classteardown #>() = 0;
<#    }
      if (!String.IsNullOrEmpty(Service.tests.testsetup)) { #>
  virtual void <#= Service.tests.testsetup #>() = 0;
<#    }
      if (!String.IsNullOrEmpty(Service.tests.testteardown)) { #>
  virtual void <#= Service.tests.testteardown #>() = 0;
<#    }
      foreach(var t in Service.tests.Tests) { #>
  virtual void <#= t.methodname #>() = 0;  //!< <#= t.name #>
<#    } 
    } #>

public:

  //! Options du jeu de données du service
  CaseOptions<#= Xml.ClassName #>* options() const { return m_options; }
 
private:
        
  //! Options du jeu de données du service
  CaseOptions<#= Xml.ClassName #>* m_options;
      
protected:

  //! Variables du service
<#  foreach(var v in Service.Variables) { 
      if(v.IsInFlow) { #>
  const <#= v.QualifiedClassName #> m_<#= v.fieldname #>;
<#    } else { #>
  <#= v.QualifiedClassName #> m_<#= v.fieldname #>;
<#    }
    } #>
private:
  static Arcane::FileContent getAxlContent()
 {
   const Arcane::Byte* content = (const Arcane::Byte*)"<#= Service.AxlContent.Content#>";
   Arcane::Span<const Arcane::Byte> bytes(content,<#= Service.AxlContent.Length#>);
   int file_version = 1;
   return Arcane::FileContent(bytes,file_version,"<#= Service.AxlContent.Compression#>");
 }
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#define ARCANE_REGISTER_SERVICE_<#= Xml.ClassName.ToUpper () #>(service_name,class_name) \
  ARCANE_REGISTER_AXL_SERVICE(class_name,Arcane::ServiceProperty(#service_name,<#= Service.TypesToArcaneNames () #>,\
  <# if (Service.IsSingleton) { #> Arcane::SFP_Singleton <# } else { #> Arcane::SFP_None <# } #>))
  
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
<#  if(Xml.NamespaceMacroName != null) { #>

<#= Xml.NamespaceMacroName #>_END_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
<#  } 
    if(Xml.NamespaceName != null) { #>

}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
<#  } 
  	if (Xml.LesserThanVersionOne) { #>

} // End namespace Arcane
 
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
<#  } #>

#endif
