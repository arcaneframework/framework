//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.28
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Arcane.Axl {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class ServiceT4StrongOnly : ServiceT4StrongOnlyBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            this.Write("\n/*---------------------------------------------------------------------------*/\n" +
                    "/*---------------------------------------------------------------------------*/\n" +
                    "// #WARNING#: This file has been generated automatically. Do not edit.\n// Arcane" +
                    " version ");
            this.Write(this.ToStringHelper.ToStringWithCulture( Version ));
            this.Write(" : ");
            this.Write(this.ToStringHelper.ToStringWithCulture( DateTime.Now ));
            this.Write("\n/*---------------------------------------------------------------------------*/\n" +
                    "/*---------------------------------------------------------------------------*/\n" +
                    "\n#ifndef ARCANE_MODULE_");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.CppHeaderGuardName ));
            this.Write("_H\n#define ARCANE_MODULE_");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.CppHeaderGuardName ));
            this.Write("_H\n/*---------------------------------------------------------------------------*" +
                    "/\n/*---------------------------------------------------------------------------*" +
                    "/\n\n");
 if (WithArcane) { 
            this.Write("#include \"arcane/VariableTypes.h\"\n#include \"arcane/ServiceInfo.h\"\n#include \"arcan" +
                    "e/IService.h\"\n#include \"arcane/IBase.h\"\n#include \"arcane/IParallelMng.h\"\n");
 if(WithMesh) { 
            this.Write("#include \"arcane/ISubDomain.h\"\n#include \"arcane/MeshAccessor.h\"\n#include \"arcane/" +
                    "CommonVariables.h\"\n");
	} 
  } 
            this.Write("\n#include \"");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("_IOptions.h\"\n#include \"");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("_StrongOptions.h\"\n\n/*------------------------------------------------------------" +
                    "---------------*/\n/*------------------------------------------------------------" +
                    "---------------*/\n");
  if (Xml.LesserThanVersionOne) { 
            this.Write("\n\nARCANE_BEGIN_NAMESPACE\n \n/*----------------------------------------------------" +
                    "-----------------------*/\n/*----------------------------------------------------" +
                    "-----------------------*/\n");
  }
	if(Xml.NamespaceMacroName != null) { 
            this.Write("\n");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.NamespaceMacroName ));
            this.Write("_BEGIN_NAMESPACE\n\n\n/*------------------------------------------------------------" +
                    "---------------*/\n/*------------------------------------------------------------" +
                    "---------------*/\n");
  } 
    if(Xml.NamespaceName != null) { 
            this.Write("\nnamespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.NamespaceName ));
            this.Write(" {\n");
  } 
            this.Write("/*---------------------------------------------------------------------------*/\n/" +
                    "*---------------------------------------------------------------------------*/\n\n" +
                    "//! Generation de la classe de base du Service\nclass Arcane");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("Object\n   : public ");
            this.Write(this.ToStringHelper.ToStringWithCulture( SimpleTypeExtensions.Namespace() ));
            this.Write("::IService\n");
 if (WithArcane) { 
 if(WithMesh) { 
            this.Write("\t, public Arcane::MeshAccessor\n\t, public Arcane::CommonVariables\n");
	} 
  }  
            this.Write("\t\n");
 foreach(var i in Service.InheritedInterfaces) { 
            this.Write("  \t, public ");
            this.Write(this.ToStringHelper.ToStringWithCulture( i.name ));
            this.Write("\n");
	} 
            this.Write("{\n  \npublic:\n");
 if (!WithArcane) { 
            this.Write("  Arcane");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("Object(std::shared_ptr<IOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write(">& _options)\n   \t: m_options(_options){}\t\n");
  } else { 
            this.Write(" \n");
 if (WithMesh) { 
            this.Write("  Arcane");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("Object(std::shared_ptr<IOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write(@">& _options,
  								Arcane::IServiceInfo* _service_info,
								Arcane::IBase* _parent,
								Arcane::ISubDomain* _sub_domain)
	: MeshAccessor(_sub_domain)
	, CommonVariables(_sub_domain)
	, m_sub_domain(_sub_domain)
  	, m_service_info(_service_info)
	, m_parent(_parent)
   	, m_options(_options){} 
");
  } else { 
            this.Write(" \n  Arcane");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("Object(std::shared_ptr<IOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write(">& _options,\n  \t\t\t\t\t\t\t\tArcane::IServiceInfo* _service_info,\n\t\t\t\t\t\t\t\tArcane::IBase" +
                    "* _parent)\n  \t: m_service_info(nullptr)\n\t, m_parent(nullptr)\n   \t, m_options(_op" +
                    "tions){}\t\n");
  } 
  } 
            this.Write("   \n  //! Destructeur\n  virtual ~Arcane");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("Object(){}\n  \npublic:\n  //! Options du jeu de donn√©es du service\n  IOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("* options() const { return m_options.get(); }\n  \n");
 if (WithArcane) { 
            this.Write(@"  //! Informations du service
  virtual Arcane::IServiceInfo* serviceInfo() const { return m_service_info; }
  
  //! Acces a  l'interface de base des principaux objets Arcane
  virtual Arcane::IBase* serviceParent() const { return m_parent; }

  //! Retourne l'interface bas niveau \a IService du service
  virtual Arcane::IService* serviceInterface() { return this; }
  
  virtual void build() {}
");
  } 
            this.Write("\nprivate:\n");
 if (WithArcane) { 
 if (WithMesh) { 
            this.Write("  Arcane::ISubDomain* m_sub_domain;\n");
  } 
            this.Write("  //! required by IService report from AbstractService\n  Arcane::IServiceInfo* m_" +
                    "service_info;\n  Arcane::IBase* m_parent;\n");
  } 
            this.Write("  std::shared_ptr<IOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("> m_options;\n  \n};\n  \n/*---------------------------------------------------------" +
                    "------------------*/\n/*---------------------------------------------------------" +
                    "------------------*/\n");
  if(Xml.NamespaceMacroName != null) { 
            this.Write("\n");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.NamespaceMacroName ));
            this.Write("_END_NAMESPACE\n\n/*---------------------------------------------------------------" +
                    "------------*/\n/*---------------------------------------------------------------" +
                    "------------*/\n");
  } 
    if(Xml.NamespaceName != null) { 
            this.Write("\n}\n\n/*---------------------------------------------------------------------------" +
                    "*/\n/*---------------------------------------------------------------------------" +
                    "*/\n");
  } 
  	if (Xml.LesserThanVersionOne) { 
            this.Write("\nARCANE_END_NAMESPACE\n \n/*-------------------------------------------------------" +
                    "--------------------*/\n/*-------------------------------------------------------" +
                    "--------------------*/\n");
  } 
            this.Write("\n");
 if(WithArcane) { 
            this.Write("#define ARCANE_REGISTER_SERVICE_");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName.ToUpper () ));
            this.Write("(service_name,class_name) \\\n  ARCANE_REGISTER_AXL_SERVICE(class_name,Arcane::Serv" +
                    "iceProperty(#service_name,");
            this.Write(this.ToStringHelper.ToStringWithCulture( Service.TypesToArcaneNames () ));
            this.Write("))\n");
 } else { 
            this.Write(" \n#define ARCANE_REGISTER_SERVICE_");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName.ToUpper () ));
            this.Write("(service_name,class_name)\n");
 } 
            this.Write("  \n#endif");
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class ServiceT4StrongOnlyBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
