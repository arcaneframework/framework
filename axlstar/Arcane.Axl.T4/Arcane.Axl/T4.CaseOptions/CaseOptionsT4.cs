//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Arcane.Axl {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class CaseOptionsT4 : CaseOptionsT4Base {
        

 /*---------------------------------------------------------------------------*/
 /*---------------------------------------------------------------------------*/
 /* Fonction pour générer les interfaces (fonctions get*()) associés aux
    options */
 void GenerateInterfaces(OptionHandler opt) {


        this.Write("\n ");

 foreach(var e in opt.Simple.Where(p => p.IsMulti)) { 

        this.Write("   Arcane::ConstArrayView<  ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.type.QualifiedName () ));


        this.Write(" > get");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToClassName () ));


        this.Write("() { return ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write(".values(); }\n ");

 }
     foreach(var e in opt.Simple.Where(p => p.IsSingle)) { 

        this.Write("   ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.type.QualifiedReturnName (true) ));


        this.Write(" get");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToClassName () ));


        this.Write("() { return ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write("(); }\n ");

 } 

        this.Write("\n ");

 foreach(var e in opt.Extended.Where(p => p.IsMulti)) { 

        this.Write("   Arcane::ConstArrayView<  ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.type.ConvertType () ));


        this.Write(" > get");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToClassName () ));


        this.Write("() { return ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write("; }\n ");

 } 

        this.Write("\n ");

 foreach(var e in opt.Extended.Where(p => p.IsSingle)) { 

        this.Write("   ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.type.ConvertType () ));


        this.Write(" get");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToClassName () ));


        this.Write("() { return ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write("(); }\n ");

 }
     foreach(var e in opt.Enumeration.Where(p => p.IsMulti)) { 

        this.Write("   Arcane::ConstArrayView<  ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.type.ConvertType () ));


        this.Write(" > get");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToClassName () ));


        this.Write("() { return ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write("; }\n ");

 }
     foreach(var e in opt.Enumeration.Where(p => p.IsSingle)) { 

        this.Write("    ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.type.ConvertType () ));


        this.Write(" get");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToClassName () ));


        this.Write("() { return ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write("(); }\n ");

 } 

        this.Write("\n ");

  foreach(var e in opt.ServiceInstance.Where(p => p.IsMulti)) { 

        this.Write("  Arcane::ConstArrayView< ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.type.ConvertType () ));


        this.Write("* > get");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToClassName () ));


        this.Write("() { return ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write("; }\n ");

  } 

        this.Write(" ");

 foreach(var e in opt.ServiceInstance.Where(p => p.IsSingle)) { 

        this.Write("   ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.type.ConvertType () ));


        this.Write("* get");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToClassName () ));


        this.Write("() { return ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write("(); }\n ");

 } 

        this.Write(" // Interfaces for complex options\n ");

 foreach(var e in opt.Complex.Where(p => p.HasInterface && p.IsMulti)) { 

        this.Write("  Arcane::ConstArrayView<  ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.@interface.ConvertType () ));


        this.Write("* > get");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToClassName () ));


        this.Write("() { return ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write("._interface(); }\n ");

 } 

        this.Write(" ");

 foreach(var e in opt.Complex.Where(p => p.HasInterface && p.IsSingle)) { 

        this.Write("  ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.@interface.ConvertType () ));


        this.Write("* get");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToClassName () ));


        this.Write("() { return ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write("._interface(); }\n ");

 }
    foreach(var e in opt.Complex.Where(p => p.IsRef)) {
      var reference = Xml.FlatteningComplex.FirstOrDefault(p => p.type != null && p.type == e.@ref);
      if(reference.HasInterface){
        if(reference.IsMulti) { 

        this.Write("  Arcane::ConstArrayView<  ");


        this.Write(this.ToStringHelper.ToStringWithCulture( reference.@interface.ConvertType () ));


        this.Write("* > get");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToClassName () ));


        this.Write("() { return ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write("._interface(); }\n        ");

 } else { 

        this.Write("         ");


        this.Write(this.ToStringHelper.ToStringWithCulture( reference.@interface.ConvertType () ));


        this.Write("* get");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToClassName () ));


        this.Write("() { return ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write("._interface(); }\n     ");

 }
      }
    }

    foreach(var e in opt.Options.Where(p => p.IsOptional)) { 

        this.Write("    bool has");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToClassName () ));


        this.Write("() const\n      { return ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write(".isPresent(); }\n  ");

  } 

        this.Write("\n  ");

 // End of GenerateInterfaces() 
 } 

 /*---------------------------------------------------------------------------*/
 /*---------------------------------------------------------------------------*/
 /* Fonction pour générer les champs des options  */
 void GenerateFields(OptionHandler opt) {


        this.Write("\n");

  foreach(var e in opt.Simple) {
    if(e.IsMulti) {

        this.Write("  Arcane::CaseOptionMultiSimpleT< ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.type.QualifiedName () ));


        this.Write(" >   ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write(";\n");

    } else { 

        this.Write("  Arcane::CaseOption");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.type.Name () ));


        this.Write("    ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write(";\n");

    }
  }

    foreach(var e in opt.ServiceInstance) {
    if(e.IsMulti) { 

        this.Write("  Arcane::CaseOptionMultiServiceT< ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.type ));


        this.Write("  >   ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write(";\n");

    } else { 

        this.Write("  Arcane::CaseOptionServiceT< ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.type ));


        this.Write(" >   ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write(";\n");

    }
    }

    foreach(var e in opt.Enumeration) {
    if(e.IsMulti) { 

        this.Write("  Arcane::CaseOptionMultiEnumT< ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.type ));


        this.Write("  >   ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write(";\n");

    } else { 

        this.Write("  Arcane::CaseOptionEnumT< ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.type ));


        this.Write(" >   ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write(";\n");

    }
    }

    foreach(var e in opt.Extended) {
    if(e.IsMulti) { 

        this.Write("  Arcane::CaseOptionMultiExtendedT< ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.type ));


        this.Write("  >   ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write(";\n");

    } else { 

        this.Write("  Arcane::CaseOptionExtendedT< ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.type ));


        this.Write(" >   ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write(";\n");

    }
    }

    foreach(var e in opt.Complex) {
    if(e.IsRef) { 

        this.Write("  CaseOption");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.@ref ));


        this.Write("   ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write(";\n");

    } else { 

        this.Write("  CaseOption");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.type ));


        this.Write("   ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write(";\n");

    }
    } 
 // End of GenerateFields() 
 } 

 /*---------------------------------------------------------------------------*/
 /*---------------------------------------------------------------------------*/
 /* Fonction pour générer les appels aux constructeurs des options */
 void GenerateOptionConstructorCalls(OptionHandler opt) {

  foreach(var e in opt.Simple) { 

        this.Write("      , ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write("(Arcane::CaseOptionBuildInfo(_configList(),\n        /* name       */ \"");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name ));


        this.Write("\", _element(),\n        /* default    */ ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Default ));


        this.Write(",\n        /* min-occurs */ ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.MinOccurs ));


        this.Write(",\n        /* max-occurs */ ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.MaxOccurs ));


        this.Write(",\n        /* optional   */ ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.IsOptional.ToString ().ToLower () ));


        this.Write(")");


      if(e.unit != null) { 

        this.Write(",\n        /* unit       */ \"");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.unit ));


        this.Write("\")\n");

    } else { 

        this.Write(")");

 } 

        this.Write("\n");

  }

    foreach(var e in opt.ServiceInstance) {
      if(e.IsSingle) { 

        this.Write("      , ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write("(Arcane::CaseOptionBuildInfo(_configList(),\n        /* name       */ \"");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name ));


        this.Write("\", _element(),\n        /* default    */ ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Default ));


        this.Write(",\n        /* min-occurs */ ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.MinOccurs ));


        this.Write(",\n        /* max-occurs */ ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.MaxOccurs ));


        this.Write(",\n        /* optional   */ ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.IsOptional.ToString ().ToLower () ));


        this.Write("),\n        /* allow-null */ ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.AllowsNull.ToString ().ToLower () ));


        this.Write(",\n        /* optional   */ ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.IsOptional.ToString ().ToLower () ));


        this.Write(")\n");

    } else { 

        this.Write("    , ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write("(Arcane::CaseOptionBuildInfo(_configList(),\n        /* name       */ \"");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name ));


        this.Write("\", _element(),\n        /* default    */ ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Default ));


        this.Write(",\n        /* min-occurs */ ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.MinOccurs ));


        this.Write(",\n        /* max-occurs */ ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.MaxOccurs ));


        this.Write(",\n        /* optional   */ ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.IsOptional.ToString ().ToLower () ));


        this.Write("),\n        /* allow-null */ ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.AllowsNull.ToString ().ToLower () ));


        this.Write(")\n");

    }
  }

    foreach(var e in opt.Enumeration) { 

        this.Write("     , ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write("(Arcane::CaseOptionBuildInfo(_configList(),\n        /* name       */ \"");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name ));


        this.Write("\", _element(),\n        /* default    */ ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Default ));


        this.Write(",\n        /* min-occurs */ ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.MinOccurs ));


        this.Write(",\n        /* max-occurs */ ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.MaxOccurs ));


        this.Write(",\n        /* optional   */ ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.IsOptional.ToString ().ToLower () ));


        this.Write("),\n        /* type       */ \"");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.type ));


        this.Write("\")\n");

  }

    foreach(var e in opt.Extended) { 

        this.Write("      , ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write("(Arcane::CaseOptionBuildInfo(_configList(),\n        /* name       */ \"");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name ));


        this.Write("\", _element(),\n        /* default    */ ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Default ));


        this.Write(",\n        /* min-occurs */ ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.MinOccurs ));


        this.Write(",\n        /* max-occurs */ ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.MaxOccurs ));


        this.Write(",\n        /* optional   */ ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.IsOptional.ToString ().ToLower () ));


        this.Write("),\n        /* type       */ \"");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.type ));


        this.Write("\")\n");

  }

    foreach(var e in opt.Complex) {
      if (e.Name != null) { 

        this.Write("      , ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write("(_configList(),\n        /* name       */ \"");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name ));


        this.Write("\", _element()");


        if (e.IsOptional) { 

        this.Write(",\n        /* optional   */ true)\n");

      } else { 

        this.Write(")\n");

      }
      }
    } 
 // End of GenerateOptionConstructorCalls() 
 } 

 /*---------------------------------------------------------------------------*/
 /*---------------------------------------------------------------------------*/
 /* Fonction pour générer le support aux conversions de langage */
 void GenerateTranslationCalls(OptionHandler opt) {


        this.Write("\n");

  foreach(var e in opt.Enumeration) {
    if(e.enumvalue != null) {
        foreach(var ee in e.enumvalue) { 

        this.Write("      {\n        auto x = new Arcane::CaseOptionEnumValue(\n          /* enum value" +
        " name */ Arcane::String(\"");


        this.Write(this.ToStringHelper.ToStringWithCulture( ee.Name ));


        this.Write("\"),\n          /* enum object     */ (int)(");


        this.Write(this.ToStringHelper.ToStringWithCulture( ee.genvalue ));


        this.Write("));\n");

       if (ee.name!=null) {
           foreach(var ed in ee.name) { 

        this.Write("        (*x).addAlternativeNodeName(\n          /* language         */ Arcane::Str" +
        "ing(\"");


        this.Write(this.ToStringHelper.ToStringWithCulture( ed.lang ));


        this.Write("\"),\n          /* alternative name */ Arcane::String(\"");


        this.Write(this.ToStringHelper.ToStringWithCulture( ed.Value ));


        this.Write("\"));\n        ");

 } 

        this.Write("      ");

 } 

        this.Write("        ");


        this.Write(this.ToStringHelper.ToStringWithCulture( e.Name.ToFuncName () ));


        this.Write(".addEnumValue(x,false);\n      }\n");

      }
    }
    }
    foreach(var e in opt.Options) {
      GenerateTranslationAndDefaultValues(e,e.Name.ToFuncName()+".");
    }

 // End of GenerateTranslationCalls() 
 } 

 /*---------------------------------------------------------------------------*/
 /*---------------------------------------------------------------------------*/
 /* Fonction pour générer les traductions (élément <name>) et les valeurs */
 /* par défaut (élément <defaultvalue>) */
 void GenerateTranslationAndDefaultValues(Xsd.Base opt,string instance_name)
 {
   foreach(var ee in opt.Names) {
     

        this.Write(this.ToStringHelper.ToStringWithCulture( instance_name ));


        this.Write("addAlternativeNodeName(\n          /* language         */ Arcane::String(\"");


        this.Write(this.ToStringHelper.ToStringWithCulture( ee.lang ));


        this.Write("\"),\n          /* alternative name */ Arcane::String(\"");


        this.Write(this.ToStringHelper.ToStringWithCulture( ee.Value ));


        this.Write("\"));\n");

    }
      foreach(var ee in opt.DefaultValues) { 

        this.Write("      ");


        this.Write(this.ToStringHelper.ToStringWithCulture( instance_name ));


        this.Write("addDefaultValue(\n          /* category         */ Arcane::String(\"");


        this.Write(this.ToStringHelper.ToStringWithCulture( ee.category ));


        this.Write("\"),\n          /* default value    */ Arcane::String(\"");


        this.Write(this.ToStringHelper.ToStringWithCulture( ee.Value ));


        this.Write("\"));\n      ");

 }
   // End of GenerateTranslationAndDefaultValues() 
 } 
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            this.Write("/*---------------------------------------------------------------------------*/\n/" +
                    "*---------------------------------------------------------------------------*/\n/" +
                    "/ #WARNING#: This file has been generated automatically. Do not edit.\n// Arcane " +
                    "version ");
            this.Write(this.ToStringHelper.ToStringWithCulture( Version ));
            this.Write(" : ");
            this.Write(this.ToStringHelper.ToStringWithCulture( DateTime.Now ));
            this.Write("\n/*---------------------------------------------------------------------------*/\n" +
                    "/*---------------------------------------------------------------------------*/\n" +
                    "\n#ifndef ARCANE_CASEOPTION_");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName.ToUpper() ));
            this.Write("_H\n#define ARCANE_CASEOPTION_");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName.ToUpper() ));
            this.Write(@"_H

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#include ""arcane/utils/String.h""

#include ""arcane/CaseOptions.h""
#include ""arcane/CaseOptionsMulti.h""
#include ""arcane/CaseOptionBuildInfo.h""
#include ""arcane/XmlNodeList.h""
");
  if(Xml.FlatteningExtended.Count () > 0) { 
            this.Write("#include \"arcane/ItemGroup.h\"\n");
  } 
  if(Xml.ServiceInstance.Count () > 0 || ComplexContainsServiceInstance) { 
            this.Write("#include \"arcane/CaseOptionService.h\"\n");
  } 
 if (Xml.NeedTypeInclude) { 
            this.Write("#include \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludePath));
            this.Write("/Types");
            this.Write(this.ToStringHelper.ToStringWithCulture(Xml.ClassName));
            this.Write(".h\"\n");
  } 
            this.Write("\n/*---------------------------------------------------------------------------*/\n" +
                    "/*---------------------------------------------------------------------------*/\n" +
                    "");
  if(Xml.FlatteningExtended.Count() > 0) { 
            this.Write("\nARCANE_BEGIN_NAMESPACE\n");
    foreach(var extended in Xml.FlatteningExtended) { 
            this.Write("extern \"C++\" bool \n_caseOptionConvert(const Arcane::CaseOptionBase&,\n            " +
                    "       const Arcane::String&,\n                   ");
            this.Write(this.ToStringHelper.ToStringWithCulture( extended.type ));
            this.Write(" &);\n");
    } 
            this.Write("ARCANE_END_NAMESPACE\n\n/*---------------------------------------------------------" +
                    "------------------*/\n/*---------------------------------------------------------" +
                    "------------------*/\n");
  }
	if (Xml.LesserThanVersionOne) { 
            this.Write("\nARCANE_BEGIN_NAMESPACE\n \n/*-----------------------------------------------------" +
                    "----------------------*/\n/*-----------------------------------------------------" +
                    "----------------------*/\n");
  }
    if(Xml.NamespaceMacroName != null) { 
            this.Write("\n");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.NamespaceMacroName ));
            this.Write("_BEGIN_NAMESPACE\n\n/*-------------------------------------------------------------" +
                    "--------------*/\n/*-------------------------------------------------------------" +
                    "--------------*/\n");
  } 
    if(Xml.NamespaceName != null) { 
            this.Write("\nnamespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.NamespaceName ));
            this.Write(" {\n\n/*---------------------------------------------------------------------------" +
                    "*/\n/*---------------------------------------------------------------------------" +
                    "*/\n");
  } 
            this.Write("\n//! Options\nclass CaseOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("\n");
 if (Xml.NeedTypeInclude) { 
            this.Write(": public Types");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("\n");
 } 
            this.Write("{\npublic:\n\n  /*------------------------------------------------------------------" +
                    "-------*/\n  /*--------------------------- Complex Options ----------------------" +
                    "-------*/\n  /*------------------------------------------------------------------" +
                    "-------*/\n");
  
    foreach(var complex in Xml.FlatteningComplex.Where( p => !p.IsRef)) { 
            this.Write("  // Generation for option \'");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.Name ));
            this.Write("\'\n    ");
 if (complex.IsMulti == true) { 
            this.Write("  // Generating multiple arity CaseOption for complex option value \'");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.Name ));
            this.Write("\'\n  class CaseOption");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.type ));
            this.Write("Value\n  : public Arcane::CaseOptionComplexValue\n");
    if (complex.HasInterface) { 
            this.Write("    , private ");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.@interface ));
            this.Write("\n");
    } 
            this.Write("  {\n  public:\n\n    typedef CaseOption");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.type ));
            this.Write("Value ThatClass;\n\n    CaseOption");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.type ));
            this.Write("Value(Arcane::ICaseOptionsMulti* opt,Arcane::ICaseOptionList* icl, const Arcane::" +
                    "XmlNode& element)\n    : Arcane::CaseOptionComplexValue(opt,icl,element)\n");
 GenerateOptionConstructorCalls(complex.Xml); 
            this.Write("\n    {\n");
  GenerateTranslationCalls(complex.Xml); 
            this.Write("\n    }\n public:\n  // Interfaces for multi-arity class CaseOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.type ));
            this.Write("\n  ");
 GenerateInterfaces(complex.Xml); 
            this.Write("\n");
   if (complex.HasInterface) { 
            this.Write("    ");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.@interface ));
            this.Write("* _interface() { return this; }\n");
 } 
            this.Write("  public:\n\n    const ThatClass* operator->() const { return this; }\n\n  public:\n  " +
                    " ");
 GenerateFields(complex.Xml); 
            this.Write("  };\n\n  // Generation for sub-option \'");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.Name ));
            this.Write("\'\n  class CaseOption");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.type ));
            this.Write("\n    : public Arcane::CaseOptionsMulti\n    , private Arcane::ArrayView< CaseOptio" +
                    "n");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.type ));
            this.Write("Value * >       \n  {\n  public:\n\n    typedef Arcane::ArrayView< CaseOption");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.type ));
            this.Write("Value * > BaseClass;\n\n    typedef CaseOption");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.type ));
            this.Write("Value value_type;\n\n  public:\n\n    CaseOption");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.type ));
            this.Write("(Arcane::ICaseOptionList* icl,\n              const Arcane::String& s, const Arcan" +
                    "e::XmlNode& element)\n      : Arcane::CaseOptionsMulti(icl,s,element,");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.MinOccurs ));
            this.Write(",");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.MaxOccurs ));
            this.Write(") \n    {\n    // Generating translations and default values.\n    ");
 GenerateTranslationAndDefaultValues(complex,String.Empty); 
            this.Write(@"    }

    BaseClass operator()() { return (*this); }

  protected:
    void multiAllocate(const Arcane::XmlNodeList& elist)
    {
      Arcane::Integer s = elist.size();
      value_type** v = 0;
      if (s!=0)
        v = new value_type*[s];
      _setArray(v,s);
      v = _ptr();
");
    if (complex.HasInterface) { 
            this.Write("      m_interfaces.resize(s);\n");
    } 
            this.Write("      for( Arcane::Integer i=0; i<s; ++i ){\n        v[i] = new value_type(this,co" +
                    "nfigList(),elist[i]);\n");
    if (complex.HasInterface) { 
            this.Write("        m_interfaces[i] = v[i]->_interface();\n");
    } 
            this.Write("      }\n    }\n\n  public:\n\n    ~CaseOption");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.type ));
            this.Write(@"()
    {
      Arcane::Integer s = count();
      if (s==0) return;
      value_type** v = _ptr();
      for( Arcane::Integer i=0; i<s; ++i ){
        delete v[i];
      }
      delete[] v;
    }

  public:

    const value_type& operator[](Arcane::Integer i) const
      { return *(BaseClass::operator[](i)); }
    value_type& operator[](Arcane::Integer i)
      { return *(BaseClass::operator[](i)); }
    Arcane::Integer count() const
      { return BaseClass::size(); }
    Arcane::Integer size() const
      { return BaseClass::size(); }

");
   if (complex.HasInterface) { 
            this.Write("  public: \n\n    Arcane::ConstArrayView< ");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.@interface ));
            this.Write("* > _interface()\n      { return m_interfaces; }\n\n  private: \n\n    Arcane::UniqueA" +
                    "rray< ");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.@interface ));
            this.Write("* > m_interfaces;\n");
    } 
            this.Write("  };\n  \n");
 } else if (complex.IsSingle == true) { 
            this.Write("  // Generating simple arity CaseOption for option \'");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.Name ));
            this.Write("\'\n  class CaseOption");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.type ));
            this.Write("\n    : public Arcane::CaseOptions\n");
    if (complex.HasInterface) { 
            this.Write("    , private ");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.@interface ));
            this.Write("\n");
    } 
            this.Write("  {\n  public:\n\n    CaseOption");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.type ));
            this.Write("(Arcane::ICaseOptionList* icl,\n              const Arcane::String& s, const Arcan" +
                    "e::XmlNode& element, bool is_optional=false)\n      : Arcane::CaseOptions(icl,s,e" +
                    "lement,is_optional)\n");
 GenerateOptionConstructorCalls(complex.Xml); 
            this.Write("    {\n");
  GenerateTranslationCalls(complex.Xml); 
  GenerateTranslationAndDefaultValues(complex,String.Empty); 
            this.Write("    }\n        \n    const CaseOption");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.type ));
            this.Write("& operator()() const { return *this; }\n\n");
    if (complex.HasInterface) { 
            this.Write("  public:\n\n    ");
            this.Write(this.ToStringHelper.ToStringWithCulture( complex.@interface ));
            this.Write("* _interface() { return this; }\n\n");
    } 
            this.Write(" public:\n  // Interfaces for simple arity CaseOptions\n  ");
 GenerateInterfaces(complex.Xml);
            this.Write("\n  private:\n    // Méthodes pour unifier la construction des options.\n    Arcane:" +
                    ":ICaseOptionList* _configList() { return configList(); }\n    Arcane::XmlNode _el" +
                    "ement() { return Arcane::XmlNode(); }\n\n  public:\n  ");
 GenerateFields(complex.Xml); 
            this.Write("\n  };\n");
  } 
 } 
            this.Write("\n  /*-------------------------------------------------------------------------*/\n" +
                    "  /*--------------------------- Non Complex Options -------------------------*/\n" +
                    "  /*-------------------------------------------------------------------------*/\n" +
                    "  \n");
  if(Xml.IsModule || Xml.IsNotCaseOption) { 
            this.Write("  CaseOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("(Arcane::ICaseMng* cm)\n    : m_case_options(new Arcane::CaseOptions(cm,\"");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.Name.ToLowerWithDash () ));
            this.Write("\"))\n");
  } else { 
            this.Write("  CaseOptions");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.ClassName ));
            this.Write("(Arcane::ICaseOptions* co)\n    : m_case_options(co)\n");
  } 
 GenerateOptionConstructorCalls(Xml); 
            this.Write("  {\n");
  GenerateTranslationCalls(Xml); 
 GenerateTranslationAndDefaultValues(Base,String.Empty); 
            this.Write("  }\n\npublic:\n  // Interfaces for main CaseOptions\n  ");
 GenerateInterfaces(Xml);
            this.Write(@"
public:

  Arcane::ICaseOptions* caseOptions() const 
  { 
    return m_case_options.get();
  }
  
  Arcane::ICaseOptionList* configList() const 
  {
    return m_case_options->configList(); 
  }
  
  void setCaseModule(Arcane::IModule* m) 
  { 
    m_case_options->setCaseModule(m); 
  }
  
  void setCaseServiceInfo(Arcane::IServiceInfo* si) 
  {
    m_case_options->setCaseServiceInfo(si); 
  }
  
  void addAlternativeNodeName(const Arcane::String& lang,
                              const Arcane::String& name)
  { 
    m_case_options->addAlternativeNodeName(lang,name); 
  }

private:

  Arcane::ICaseOptionList* _configList() const { return configList(); }
  Arcane::XmlNode _element() const { return Arcane::XmlNode(); }

private:

  static Arcane::ICaseOptions* _createCaseOption(Arcane::ICaseMng* cm,Arcane::ICaseOptions* co);

  Arcane::ReferenceCounter<Arcane::ICaseOptions> m_case_options;

public:

  ");
  GenerateFields(Xml); 
            this.Write("};\n\n/*---------------------------------------------------------------------------" +
                    "*/\n/*---------------------------------------------------------------------------" +
                    "*/\n");
  if(Xml.NamespaceMacroName != null) { 
            this.Write("\n");
            this.Write(this.ToStringHelper.ToStringWithCulture( Xml.NamespaceMacroName ));
            this.Write("_END_NAMESPACE\n\n/*---------------------------------------------------------------" +
                    "------------*/\n/*---------------------------------------------------------------" +
                    "------------*/\n");
  } 
    if(Xml.NamespaceName != null) { 
            this.Write("\n}\n\n/*---------------------------------------------------------------------------" +
                    "*/\n/*---------------------------------------------------------------------------" +
                    "*/\n");
  }
	if (Xml.LesserThanVersionOne) { 
            this.Write("\nARCANE_END_NAMESPACE\n \n/*-------------------------------------------------------" +
                    "--------------------*/\n/*-------------------------------------------------------" +
                    "--------------------*/\n");
  } 
            this.Write("\n#endif\n\n\n");
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class CaseOptionsT4Base {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
