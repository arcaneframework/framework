name: IFPEN devenv 2018b

on:
  workflow_dispatch:

env:
  # Framework
  FRAMEWORK_BUILD_DIR: /__w/framework/framework/build
  FRAMEWORK_INSTALL_DIR: /__w/framework/framework/install
  FRAMEWORK_SOURCE_DIR: /__w/framework/framework
  # ccache
  CC_KEY_PREFIX: ifpen-el7-gimkl-2018b
  CCACHE_COMPRESS: true
  CCACHE_COMPRESSLEVEL: 6
  CCACHE_DIR: '/__w/framework/framework/ccache'
  CCACHE_MAXSIZE: 5G
  # CMake
  CM_BUILD_OPTS: "-j2"
  CM_BUILD_TYPE: Release
  CM_CCACHE_OPTS: "-DCMAKE_CXX_COMPILER_LAUNCHER=ccache"
  # CTest
  CT_OPTS: "--timeout 300 --output-on-failure"

jobs:
  build :
    name: ${{ matrix.config.name }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    container:
      image: ${{ matrix.config.image }}
      #options: --user root  # Avoid to match github UID in container.
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "foss/2018b el7",
            image: "ghcr.io/arcaneframework/arcane-ifpen-devenv-foss-2018b:el7",
            ccache_key_prefix: "arcane-ifpen-devenv-foss-2018b_el7",
          }
          - {
            name: "foss/2018b el8",
            image: "ghcr.io/arcaneframework/arcane-ifpen-devenv-foss-2018b:el8",
            ccache_key_prefix: "arcane-ifpen-devenv-foss-2018b_el8",
          }
          - {
            name: "gimkl/2018b el7",
            image: "ghcr.io/arcaneframework/arcane-ifpen-devenv-gimkl-2018b:el7",
            ccache_key_prefix: "arcane-ifpen-devenv-gimkl-2018b_el7",
          }
          - {
            name: "gimkl/2018b el8",
            image: "ghcr.io/arcaneframework/arcane-ifpen-devenv-gimkl-2018b:el8",
            ccache_key_prefix: "arcane-ifpen-devenv-gimkl-2018b_el8",
          }
    steps:

      # ccache
      - name: Get date
        id: get-date
        shell: bash
        run: echo "NOW=$(/bin/date -u '+%Y%m%d%H%M%S')" >> $GITHUB_ENV
      - name: Get cache
        id: get-cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ matrix.config.ccache_key_prefix }}-${{ env.CM_BUILD_TYPE }}-${{ env.NOW }}-${{ github.run_number }}
          restore-keys: ${{ env.CC_KEY_PREFIX }}-arccore-${{ env.CM_BUILD_TYPE }}-

      # Arcane installation

      - name: Checkout Framework
        id: checkout-framework
        if: |
          (success() || failure())
        with:
          path: ${{ env.FRAMEWORK_SOURCE_DIR }}

      - name: Configure Framework
        id: configure-framework
        if: |
          (success() || failure()) &&
          steps.checkout-framework.outcome == 'success'
        shell: bash
        ####
        run: cmake -S ${{ env.FRAMEWOEK_SOURCE_DIR }}/arccore -B ${{ env.FRAMEWORK_BUILD_DIR }} -DCMAKE_INSTALL_PREFIX=${{ env.FRAMEWORK_INSTALL_DIR }} -DARCANE_WANT_CHECK=ON -DARCANE_BUILD_TYPE=Release -DARCCORE_BUILD_MODE=Check -DREMOVE_UID_ON_DETACH=ON -DUSE_GTEST_DEATH_TEST=ON

      - name: Build Framework
        id: build-framework
        if: |
          (success() || failure()) &&
          steps.configure-framework.outcome == 'success'
        shell: bash
        run: cmake --build ${{ env.FRAMEWORK_BUILD_DIR }} ${{ env.CM_BUILD_OPTS }}

      - name: Install Framework
        id: install-framework
        if: |
          (success() || failure()) &&
          steps.build-framework.outcome == 'success'
        shell: bash
        run: cmake --install ${{ env.FRAMEWORK_BUILD_DIR }}

      - name: Test Framework
        id: test-framework
        if: |
          (success() || failure()) &&
          steps.install-framework.outcome == 'success'
        shell: bash
        run: ctest --test-dir ${{ env.FRAMEWORK_BUILD_DIR }} ${{ env.CT_OPTS }} -E '^hydro5_4proc_3sd_4proc$'

      - name: Upload test Framework artifact
        id: upload-test-framework-artifact
        uses: actions/upload-artifact@v3
        if: |
          (success() || failure()) &&
          steps.test-framework.outcome == 'failure'
        with:
          name: framework-test-artifact
          path: ${{ env.FRAMEWORK_BUILD_DIR }}/Testing
          retention-days: 1
