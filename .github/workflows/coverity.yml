name: Coverity Scan
# Based on https://github.com/arcaneframework/alien/blob/main/.github/workflows/coverity.yml

on:
  schedule:
    - cron: '23 1 * * *' # Tous les jours Ã  01:23 (du matin).
  # A executer lorsque l'on demande.
  workflow_dispatch:
  

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    name: ubuntu coverity
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/arcaneframework/ubuntu-2004_gcc-11:latest
    steps:
      # Checkout v2 does not include files listed in .gitattributes
      - name: Checkout
        uses: actions/checkout@v1
        with:
          submodules: true

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `C MAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: |
          ${{matrix.config.precommand}}
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DARCANE_DEFAULT_PARTITIONER=Metis -DARCANE_WANT_TOTALVIEW=ON -DARCANE_WANT_LIBXML2=ON -DARCANE_WANT_LEGACY_CONNECTIVITY=OFF -DARCANE_WANT_CHECK=OFF -DARCANE_WANT_ARCCON_EXPORT_TARGET=OFF -DCMAKE_DISABLE_FIND_PACKAGE_Papi=ON

      - name: Install missing packages
        shell: 'bash'
        run: |
          apt-get update -y
          apt-get install -y curl

      # Setting up ccache from github cached files
      - name: Prepare coverity
        id: coverity-hash
        # Disabled for `act`
        if: ${{ !env.ACT }}
        run: |
          mkdir coverity-tool
          curl https://scan.coverity.com/download/linux64 -o coverity-tool/md5-new \
            -s --data "token=$COV_TOKEN&project=arcaneframework%2Fframework&md5=1"
          echo "::set-output name=md5::$(cat coverity-tool/md5-new)"
        env:
          COV_TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}

      - name: restore cached files
        uses: actions/cache@v2
        # Disabled for `act`
        if: ${{ !env.ACT }}
        with:
          path: coverity-tool
          key: coverity-linux-${{ steps.coverity-hash.outputs.md5 }}

      - name: Set up coverity
        run: |
          if cmp -s coverity-tool/md5-new coverity-tool/md5 ; then
            echo "running from cache"
          else
            curl --silent https://scan.coverity.com/download/linux64 \
              --data "token=${COV_TOKEN}&project=arcaneframework%2Fframework" \
              | tar xz -C coverity-tool --strip-components=1
          fi
          cp coverity-tool/md5-new coverity-tool/md5
        shell: bash
        env:
          COV_TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}

      - name: Build with coverity
        # Build, using cov-build and cov-int directory as output (mandatory)
        run: |
          export PATH="${PWD}/coverity-tool/bin:${PATH}"
          cov-build --dir cov-int make -C build -j $(nproc)
        shell: bash

      - name: Submit results to Coverity Scan
        run: |
          tar -czvf cov-int.tgz cov-int
          curl \
            --form project="${{ inputs.project }}" \
            --form token="$COV_TOKEN" \
            --form email="$COV_EMAIL" \
            --form file=@cov-int.tgz \
            --form version="${{ github.sha }}" \
            --form description="${{ github.repository }} / ${{ github.ref }}" \
            "https://scan.coverity.com/builds?project=arcaneframework%2Fframework"
        shell: bash
        env:
          COV_TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}
          COV_EMAIL: ${{ secrets.COVERITY_SCAN_EMAIL }}
