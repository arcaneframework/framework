/*
 * Copyright 2020 IFPEN-CEA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

#include "MatrixConverterRegisterer.h"
/* Author : havep at Sat Nov  1 21:35:22 2014
 * Generated by createNew
 */

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#include <vector>

using namespace Alien;
using namespace Arccore;

namespace
{ // Unnamed namespace for local "global" variables
static std::vector<IMatrixConverter*>* matrix_converter_db = nullptr;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

MatrixConverterRegisterer::MatrixConverterRegisterer(ConverterCreateFunc func)
{
  if (matrix_converter_db == 0)
    matrix_converter_db = new std::vector<IMatrixConverter*>();
  matrix_converter_db->push_back(func());
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

IMatrixConverter*
MatrixConverterRegisterer::getConverter(BackEndId from, BackEndId to)
{
  if (!matrix_converter_db) {
    throw FatalErrorException(A_FUNCINFO, "There is no converter registered");
  }

  for (std::vector<IMatrixConverter*>::const_iterator i = matrix_converter_db->begin();
       i != matrix_converter_db->end(); ++i) {
    IMatrixConverter* c = *i;
    if (c->sourceBackend() == from and c->targetBackend() == to) {
      return c;
    }
  }
  return nullptr;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
