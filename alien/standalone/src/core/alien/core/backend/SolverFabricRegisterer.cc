/*
 * Copyright 2020 IFPEN-CEA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

#include "SolverFabricRegisterer.h"
/* Author : havep at Sat Nov  1 21:35:22 2014
 * Generated by createNew
 */

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

namespace
{
static std::vector<Alien::ISolverFabric*>* solver_fabric_db = nullptr;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

namespace Alien
{

using namespace Arccore;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

SolverFabricRegisterer::SolverFabricRegisterer(FabricCreateFunc func)
{
  if (!solver_fabric_db)
    solver_fabric_db = new std::vector<ISolverFabric*>();
  solver_fabric_db->push_back(func());
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

ISolverFabric*
SolverFabricRegisterer::getSolverFabric(BackEndId back_end)
{
  if (!solver_fabric_db) {
    throw FatalErrorException(A_FUNCINFO, "There is no converter registered");
  }

  for (std::vector<ISolverFabric*>::const_iterator i = solver_fabric_db->begin();
       i != solver_fabric_db->end(); ++i) {
    ISolverFabric* c = *i;
    if (c->backend() == back_end) {
      return c;
    }
  }
  return nullptr;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

} // namespace Alien

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
