<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#  Action<OptionHandler, String, String> getterSection = (OptionHandler _xml, String beginLineSpace, String redirectionPrefix) => { #>
<# foreach(var simple in _xml.Simple) {
	string return_type = simple.type.QualifiedName();
	if (simple.IsSingle == false) {
		return_type = return_type.ToArrayType();
	}#>
<#=beginLineSpace#><#= return_type #> <#= simple.Name.ToFuncName() #>() const
<#=beginLineSpace#>{
<#=beginLineSpace#>  return <#= redirectionPrefix #><#= simple.Name.ToFuncName() #>() ;
<#=beginLineSpace#>}
<# } #>
<# foreach(var enumerator in _xml.Enumeration) {
	string return_type = enumerator.type;
	if (enumerator.IsSingle == true) { #>
<#=beginLineSpace#><#= return_type #> <#= enumerator.Name.ToFuncName() #>() const
<#=beginLineSpace#>{
<#=beginLineSpace#>  return <#= redirectionPrefix #><#= enumerator.Name.ToFuncName() #>();
<#=beginLineSpace#>}
<#	}
	else{ #>
<#=beginLineSpace#><#= return_type.ToArrayType() #> <#= enumerator.Name.ToFuncName() #>() const
<#=beginLineSpace#>{
<#=beginLineSpace#>  return <#= redirectionPrefix #><#= enumerator.Name.ToFuncName() #>;
<#=beginLineSpace#>}
<#  } #>
<# } #>
<# foreach(var service in _xml.ServiceInstance) {
	string return_type = service.type + "*";
	if (service.IsSingle == false) {
		return_type = return_type.ToArrayType();
	} #>
<#=beginLineSpace#><#= return_type #> <#= service.Name.ToFuncName() #>() const
<#=beginLineSpace#>{ 
<#=beginLineSpace#>  return <#= redirectionPrefix #><#= service.Name.ToFuncName() #>(); 
<#=beginLineSpace#>}
<# } #>
<# foreach(var sub_complex in _xml.Complex.Where( p => !p.IsRef) ) {
	if (sub_complex.IsSingle == true) {
		string return_type = "const IOptions" + sub_complex.type + "&";#>
<#=beginLineSpace#><#= return_type #> <#= sub_complex.Name.ToFuncName() #>() const
<#=beginLineSpace#>{
<#=beginLineSpace#>  if(!m_initialize_<#= sub_complex.Name.DashToUnderscore() #>){
<#=beginLineSpace#>    m_<#= sub_complex.Name.DashToUnderscore() #> = new CaseOptionsT<#= sub_complex.type #><typename CaseOptions<#= Xml.ClassName #>::CaseOption<#= sub_complex.type #>>(& <#= redirectionPrefix #><#= sub_complex.Name.ToFuncName() #>);
<#=beginLineSpace#>    m_initialize_<#= sub_complex.Name.DashToUnderscore() #> = true;
<#=beginLineSpace#>  }
<#=beginLineSpace#>  return *m_<#= sub_complex.Name.DashToUnderscore() #>;
<#=beginLineSpace#>}
<# }
	else if (sub_complex.IsMulti == true) { 
		string return_type = "IOptions" + sub_complex.type + "*";#>
<#=beginLineSpace#><#= return_type.ToArrayType() #> <#= sub_complex.Name.ToFuncName() #>() const
<#=beginLineSpace#>{
<#=beginLineSpace#>  if(!m_initialize_<#= sub_complex.Name.DashToUnderscore() #>){
<#=beginLineSpace#>    m_<#= sub_complex.Name.DashToUnderscore() #>.resize(<#= redirectionPrefix #><#= sub_complex.Name.ToFuncName() #>.size());
<#=beginLineSpace#>    for (Arcane::Integer i = 0; i < <#= redirectionPrefix #><#= sub_complex.Name.ToFuncName() #>.size(); i++)
<#=beginLineSpace#>      m_<#= sub_complex.Name.DashToUnderscore() #>[i] = new CaseOptionsT<#= sub_complex.type #><typename CaseOptions<#= Xml.ClassName #>::CaseOption<#= sub_complex.type #>Value>(& <#= redirectionPrefix #><#= sub_complex.Name.ToFuncName() #>[i]);
<#=beginLineSpace#>    m_initialize_<#= sub_complex.Name.DashToUnderscore() #> = true;
<#=beginLineSpace#>  }
<#=beginLineSpace#>  return m_<#= sub_complex.Name.DashToUnderscore() #>;
<#=beginLineSpace#>}
<# } #>

<# } #>
<# }; #>
<#  Action<OptionHandler, String> destructorSection = (OptionHandler _xml, String beginLineSpace) => { 
  foreach(var sub_complex in _xml.Complex.Where( p => !p.IsRef) ) {
	string field_name  = "m_"+sub_complex.Name.DashToUnderscore(); #>
<#=beginLineSpace#>if(m_initialize_<#= sub_complex.Name.DashToUnderscore() #>)
<#=beginLineSpace#>{
<# if(sub_complex.IsSingle == false ) { #>
<#=beginLineSpace#>  for(auto iter=<#= field_name #>.begin();iter!=<#= field_name #>.end();++iter)
<#=beginLineSpace#>    delete *iter ;
<#=beginLineSpace#>  <#= field_name #>.resize(0);
	<# }
	else {#>
<#=beginLineSpace#>	delete <#= field_name #>;
	<# } #>
<#=beginLineSpace#>	m_initialize_<#= sub_complex.Name.DashToUnderscore() #> = false;
	}
<#  } #>
<# }; #>
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
// #WARNING#: This file has been generated automatically. Do not edit.
// Arcane version <#= Version #> : <#= DateTime.Now #>
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#ifndef ARCANE_CASEOPTIONST_<#= Xml.ClassName.ToUpper() #>_H
#define ARCANE_CASEOPTIONST_<#= Xml.ClassName.ToUpper() #>_H

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#include "<#= Xml.ClassName #>_IOptions.h"

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
<# var non_ref_complex = Xml.FlatteningComplex.Where(p => !p.IsRef); #>

template<typename CaseOptions<#= Xml.ClassName #>>
class CaseOptionsT<#= Xml.ClassName #> : public IOptions<#= Xml.ClassName #>
{
public:

<# // I - Complex Options Definition #>
<# // #>
<# if (non_ref_complex.Count() > 0) { #>
  /*-------------------------------------------------------------------------*/
  /*------------------------------- Complex Options -------------------------*/
  /*-------------------------------------------------------------------------*/
<# foreach(var complex in non_ref_complex) { #>

  template<typename CaseOptions<#= complex.type #>>
  class CaseOptionsT<#= complex.type #> : public IOptions<#= complex.type #>
  {
  public:	
<# // I - 1 Constructor #>
<# // #>
    CaseOptionsT<#= complex.type #>(const CaseOptions<#= complex.type #>* <#= complex.Name.ToFuncName() #>options)
    {
      m_<#= complex.Name.DashToUnderscore() #> = <#= complex.Name.ToFuncName() #>options;
<# foreach(var sub_complex in complex.Xml.Complex.Where( p => !p.IsRef) ) { #>
      m_initialize_<#= sub_complex.Name.DashToUnderscore() #> = false;
<# } #>
    }
<# //  Destructor #>
    virtual ~CaseOptionsT<#= complex.type #>()
    {
<# destructorSection(complex.Xml, "    "); #>
    }
<# // I - 2 Getters #>
<# // #>
<# getterSection(complex.Xml, "		", "m_"+complex.Name.DashToUnderscore()+"->"); #>

<# // I - 3 Data members #>
<# // #>
    const CaseOptions<#= complex.type #>* m_<#= complex.Name.DashToUnderscore() #>;
<# foreach(var sub_complex in complex.Xml.Complex.Where( p => !p.IsRef) ) { 
	string complex_type =  "IOptions" + sub_complex.type + "*";#>
    mutable bool m_initialize_<#= sub_complex.Name.DashToUnderscore() #>;
<#   if (sub_complex.IsSingle == true) { #>
    mutable <#= complex_type #> m_<#= sub_complex.Name.DashToUnderscore() #>;
<# } else if (sub_complex.IsMulti == true) { #>
    mutable <#= complex_type.ToUniqueArrayType() #> m_<#= sub_complex.Name.DashToUnderscore() #>;
<# } #>
<# } #>
  };

<# } #>
<# } #>
<# // II - Main service options #>
<# // #>

<# // II - 1 Constructor #>
<# // #>
  /*-------------------------------------------------------------------------*/
  /*--------------------------- Root Options -------------------------*/
  /*-------------------------------------------------------------------------*/
  
  CaseOptionsT<#= Xml.ClassName #>(CaseOptions<#= Xml.ClassName #>* caseoptions)
  {
    m_caseoptions = caseoptions;
<# foreach(var complex in Xml.Complex.Where( p => !p.IsRef)) { #>
    m_initialize_<#= complex.Name.DashToUnderscore() #> = false;
<# } #>	
  }
	
<# //  Destructor #>
  virtual ~CaseOptionsT<#= Xml.ClassName #>()
  {
<# destructorSection(Xml, "	"); #>
  }

<# // II - 2 Getters #>
<# // #>
<# getterSection(Xml, "  ", "m_caseoptions->"); #>

<# // II - 3 Data members #>
<# // #>
private:

  CaseOptions<#= Xml.ClassName #>* m_caseoptions;
<# foreach(var complex in Xml.Complex.Where( p => !p.IsRef)) { 
	string complex_type =  "IOptions" + complex.type + "*"; #>
  mutable bool m_initialize_<#= complex.Name.DashToUnderscore() #>;
<# if (complex.IsSingle == true) { #>
  mutable <#= complex_type #> m_<#= complex.Name.DashToUnderscore() #>;
<# } else if (complex.IsMulti == true) { #>
  mutable <#= complex_type.ToUniqueArrayType() #> m_<#= complex.Name.DashToUnderscore() #>;
<# } #>
<# } #>

};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif // ARCANE_CASEOPTIONST_<#= Xml.ClassName.ToUpper() #>_H
		
		
		
		
		
		
		
		
		
	