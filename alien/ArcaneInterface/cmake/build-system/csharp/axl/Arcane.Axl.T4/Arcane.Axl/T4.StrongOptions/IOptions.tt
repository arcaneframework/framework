<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#  Action<OptionHandler, String> bodySection = (OptionHandler _xml, String beginLineSpace) => { #>
<# // #>
<# foreach(var simple in _xml.Simple) {
	string return_type = simple.type.QualifiedName();
	if (simple.IsSingle == false) {
		return_type = return_type.ToArrayType();
	} #>
<#=beginLineSpace#>virtual <#= return_type #> <#= simple.Name.ToFuncName() #>() const = 0;
<# } #>
<# // #>
<# foreach(var enumerator in _xml.Enumeration) {
	string return_type = enumerator.type;
	if (enumerator.IsSingle == false) {
		return_type = return_type.ToArrayType();
	} #>
<#=beginLineSpace#>virtual <#= return_type #> <#= enumerator.Name.ToFuncName() #>() const = 0;
<# } #>
<# // #>
<# foreach(var service in _xml.ServiceInstance) {
	string return_type = service.type + "*";
	if (service.IsSingle == false) {
		return_type = return_type.ToArrayType();
	} #>
<#=beginLineSpace#>virtual <#= return_type #> <#= service.Name.ToFuncName() #>() const = 0;
<# } #>
<# // #>
<# foreach(var complex in _xml.Complex.Where( p => !p.IsRef) ) {
	string return_type;
	if (complex.IsSingle == true)
		return_type = "const IOptions" + complex.type + "&";
	else {
		return_type = "IOptions" + complex.type + "*";
		return_type = return_type.ToArrayType();
	} #>
<#=beginLineSpace#>virtual <#= return_type #> <#= complex.Name.ToFuncName() #>() const = 0;
<# } #>
<# }; #>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
// #WARNING#: This file has been generated automatically. Do not edit.
// Arcane version <#= Version #> : <#= DateTime.Now #>
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#ifndef ARCANE_IOPTIONS_<#= Xml.ClassName.ToUpper() #>_H
#define ARCANE_IOPTIONS_<#= Xml.ClassName.ToUpper() #>_H

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

<# if(WithArcane) { #>
#include "arcane/VariableTypes.h"
<# } #>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

<# var non_ref_complex = Xml.FlatteningComplex.Where(p => !p.IsRef); #>
class IOptions<#= Xml.ClassName #>
{
public:

<# // I - Complex Options Definition #>
<# // #>
<# foreach(var complex in non_ref_complex ) { #>
  class IOptions<#= complex.type #>
  {
  public:
<# // #>
<# // I - Complex Options #>
<# bodySection(complex.Xml, "    "); #>
    virtual ~IOptions<#= complex.type #>() {}
  };

<# } #>
<# // II - Main service options #>
<# // #>
  virtual ~IOptions<#= Xml.ClassName #>() {}
<# // #>
<# bodySection(Xml, "  "); #>

};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif // ARCANE_IOPTIONS_<#= Xml.ClassName.ToUpper() #>_H