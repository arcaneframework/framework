<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
// #WARNING#: This file has been generated automatically. Do not edit.
// Arcane version <#= Version #> : <#= DateTime.Now #>
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#ifndef ARCANE_MODULE_<#= Xml.ClassName.ToUpper() #>_H
#define ARCANE_MODULE_<#= Xml.ClassName.ToUpper() #>_H
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
<# 
// TODO put withMesh  withTrace withIntrospection  into axl 
bool WithTrace = true; 
bool WithIntrospection = true; 
#>
#include "arcane/VariableTypes.h"
#include "arcane/ServiceInfo.h"
#include "arcane/ServiceBuildInfo.h"
#include "arcane/ServiceFactory.h"
#include "arcane/ServiceRegisterer.h"
#include "arcane/IService.h"
#include "arcane/IBase.h"
#include "arcane/IParallelMng.h"
<# if(WithTrace) { #>
#include "arcane/utils/TraceAccessor.h"
<#	} #>
<# if(WithMesh) { #>
#include "arcane/ISubDomain.h"
#include "arcane/MeshAccessor.h"
#include "arcane/CommonVariables.h"
extern "C" Arcane::ISubDomain* _arcaneGetDefaultSubDomain();
<#	} #>
<#  if (Service.HasTests) { #>
#include "arcane/UnitTestServiceAdapter.h"
<#  } #>

#include "<#= Xml.ClassName #>_IOptions.h"
#include "<#= Xml.ClassName #>_CaseOptionsT.h"

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

<#  if (Xml.LesserThanVersionOne) { #>

ARCANE_BEGIN_NAMESPACE
 
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
<#  }
	if(Xml.NamespaceMacroName != null) { #>

<#= Xml.NamespaceMacroName #>_BEGIN_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
<#  } 
    if(Xml.NamespaceName != null) { #>

namespace <#= Xml.NamespaceName #> {

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
<#  } #>
class CaseOptions<#= Xml.ClassName #>;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

//! Generation de la classe de base du Service
<# // !TODO with or without TraceAccessor Introspection from axl or option axl2cc#>
class Arcane<#= Xml.ClassName #>Object
  : public Arcane::IService
<# if(WithTrace) { #>
  , public Arcane::TraceAccessor
<#	} #>
<# if(WithMesh) { #>
  , public Arcane::MeshAccessor
  , public Arcane::CommonVariables
<#	} #>	
<#	if(Service.HasTests) { #>
  , public Arcane::UnitTestServiceAdapter<Arcane<#= Xml.ClassName #>Object>
<#	} #>
<#	foreach(var i in Service.InheritedInterfaces) { #>
  , public <#= i.name #>
<#	} #>
{
public:
  template <typename ServiceClassType> static void fillServiceInfo(Arcane::ServiceInfo* si)
  {
    si->setCaseOptionsFileName("<#= Xml.ClassName #>_<#= Path.Replace("/","_") #>");
<#	foreach(var i in Service.Interfaces) { #>
    ARCANE_SERVICE_INTERFACE(<#= i.name #>) . registerToServiceInfo< ServiceClassType >(si);
<#	} #>
<#	if(Service.HasTests) { #>
	ARCANE_SERVICE_INTERFACE(Arcane::IXmlUnitTest) . registerToServiceInfo< ServiceClassType >(si);
<#	} #>

    si->setAxlVersion(<#= Xml.Version #>);
    si->setDefaultTagName(Arcane::String("<#= Xml.ClassName.ToLowerWithDash () #>"));
<#  foreach(var n in Service.Names) { #>
    si->setTagName(Arcane::String("<#= n.Value #>"),Arcane::String("<#= n.lang #>"));
<#  } #>
  }

public:

  //! Constructeur Case Option
  Arcane<#= Xml.ClassName #>Object(const Arcane::ServiceBuildInfo& sbi):
<# if(WithTrace) { #>
    TraceAccessor(sbi.serviceParent()->traceMng()),
<# } if(WithMesh) { #>
    MeshAccessor(sbi.mesh()),
    CommonVariables(sbi.subDomain()),
    m_sub_domain(sbi.subDomain()),
<#  } if(WithIntrospection) { #>
    m_service_info(sbi.serviceInfo()),
    m_parent(sbi.serviceParent()),
<#  } if(Service.HasTests) { #>
    Arcane::UnitTestServiceAdapter<Arcane<#= Xml.ClassName #>Object>(this),
<#	} #>
<#  foreach(var v in Service.Variables) { #>
    , m_<#= v.fieldname #>(Arcane::VariableBuildInfo(sbi.mesh(), "<#= v.name #>"<#
      if(v.NbProperty > 0) { 
    #>, Arcane::IVariable::P<#= v.FirstProperty.ToString () #><# 
        foreach(var p in v.OthersProperties) {
    #>| Arcane::IVariable::P<#= p.ToString () #><#
        } 
      } #>)),
<#  } #>
    m_options(nullptr)
  {
    Arcane::ICaseOptions* co = sbi.caseOptions();
    if (co) {
  	 CaseOptions<#= Xml.ClassName #>* _options = new CaseOptions<#= Xml.ClassName #>(sbi.subDomain()->caseMng(),co);
     m_options = std::make_shared<CaseOptionsT<#= Xml.ClassName #><CaseOptions<#= Xml.ClassName #>>>(CaseOptionsT<#= Xml.ClassName #><CaseOptions<#= Xml.ClassName #>>(_options));
    }
<# if(Service.HasTests) { 
 	  if (!String.IsNullOrEmpty(Service.tests.classsetup)) { #>
    setClassSetUpFunction(&Arcane<#= Xml.ClassName #>Object::<#= Service.tests.classsetup #>);
<#    }
      if (!String.IsNullOrEmpty(Service.tests.classteardown)) { #> 
    setClassTearDownFunction(&Arcane<#= Xml.ClassName #>Object::<#= Service.tests.classteardown #>);
<#    }
      if (!String.IsNullOrEmpty(Service.tests.testsetup)) { #>
    setTestSetUpFunction(&Arcane<#= Xml.ClassName #>Object::<#= Service.tests.testsetup #>);
<#    }
      if (!String.IsNullOrEmpty(Service.tests.testteardown)) { #>
    setTestTearDownFunction(&Arcane<#= Xml.ClassName #>Object::<#= Service.tests.testteardown #>);
<#    } 
      foreach(var t in Service.tests.Tests) { #>
    addTestFunction(&Arcane<#= Xml.ClassName #>Object::<#= t.methodname #>, "<#= t.name #>", "<#= t.methodname #>");
<# } #>
<# } #>
  }

  //! Constructeurs IOption StrongOption uniquement notamme pour register instance
  Arcane<#= Xml.ClassName #>Object(std::shared_ptr<IOptions<#= Xml.ClassName #>> _options):
<# if(WithTrace) { #>
    TraceAccessor(nullptr),
<# } if(WithMesh) { #>
    MeshAccessor(_arcaneGetDefaultSubDomain()),
    CommonVariables(_arcaneGetDefaultSubDomain()),
    m_sub_domain(_arcaneGetDefaultSubDomain()),
<# } if(WithIntrospection) { #>
    m_service_info(nullptr),
    m_parent(nullptr),   
<# } #>
    m_options(_options){} 
    
  //! Constructeurs IOption StrongOption
  Arcane<#= Xml.ClassName #>Object(std::shared_ptr<IOptions<#= Xml.ClassName #>> _options
<# if(WithTrace) { #>
                                , Arcane::ITraceMng* _trace_mng
<# } if(WithMesh) { #>
                                , Arcane::ISubDomain* _sub_domain
<# } if(WithIntrospection) { #>
                                , Arcane::IServiceInfo* _service_info
                                , Arcane::IBase* _parent
<# } #>
   ):
<# if(WithTrace) { #>
    TraceAccessor(_trace_mng),
<# } if(WithMesh) { #>
    MeshAccessor(_sub_domain),
    CommonVariables(_sub_domain),
    m_sub_domain(_sub_domain),
<# } if(WithIntrospection) { #>
    m_service_info(_service_info),
    m_parent(_parent),   
<# } #>
    m_options(_options){} 
    
  //! Destructeur
  virtual ~Arcane<#= Xml.ClassName #>Object()
  {
  }

<#	if(Service.HasTests) { #>
public:

    //! Méthodes de test\n");
<#    if (!String.IsNullOrEmpty(Service.tests.classsetup)) { #>
  virtual void <#= Service.tests.classsetup #>() = 0;
<#    }
      if (!String.IsNullOrEmpty(Service.tests.classteardown)) { #> 
  virtual void <#= Service.tests.classteardown #>() = 0;
<#    }
      if (!String.IsNullOrEmpty(Service.tests.testsetup)) { #>
  virtual void <#= Service.tests.testsetup #>() = 0;
<#    }
      if (!String.IsNullOrEmpty(Service.tests.testteardown)) { #>
  virtual void <#= Service.tests.testteardown #>() = 0;
<#    }
      foreach(var t in Service.tests.Tests) { #>
  virtual void <#= t.methodname #>() = 0;  //!< <#= t.name #>
<#    } 
    } #>
  
<# if(WithIntrospection) { #>
  //! Informations du service
  virtual Arcane::IServiceInfo* serviceInfo() const { return m_service_info; }
  
  //! Acces a  l'interface de base des principaux objets Arcane
  virtual Arcane::IBase* serviceParent() const { return m_parent; }
  
<# } #>
  //! Retourne l'interface bas niveau \a IService du service
  virtual Arcane::IService* serviceInterface() { return this; }
  
<# if(WithMesh) { #>
  virtual Arcane::ISubDomain* subDomain() { return m_sub_domain; }
<# } #>
  
  virtual void build() {}

  //! Options du jeu de données du service
  IOptions<#= Xml.ClassName #>* options() const { return m_options.get(); }

protected:

//! Variables du service
<#  foreach(var v in Service.Variables) { 
      if(v.IsInFlow) { #>
  const Arcane::<#= v.ClassName #> m_<#= v.fieldname #>;
<#    } else { #>
  Arcane::<#= v.ClassName #> m_<#= v.fieldname #>;
<#    }
    } #>
    
private:

<# if(WithMesh) { #>
  //! required by IService report from BasicService (caseOption or subdomain)
  Arcane::ISubDomain* m_sub_domain;
<# } #>
<# if(WithIntrospection) { #>
  //! required by IService report from AbstractService
  Arcane::IServiceInfo* m_service_info;
  Arcane::IBase* m_parent;
<# } #>  
  //! Options du jeu de donnees du service
  std::shared_ptr<IOptions<#= Xml.ClassName #>> m_options;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
#define ARCANE_REGISTER_SERVICE_<#= Xml.ClassName.ToUpper () #>(service_name,class_name) \
  ARCANE_REGISTER_AXL_SERVICE(class_name,Arcane::ServiceProperty(#service_name,Arcane::ST_<#= Service.type.Name () #>))
  
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
<#  if(Xml.NamespaceMacroName != null) { #>

<#= Xml.NamespaceMacroName #>_}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
<#  } 
    if(Xml.NamespaceName != null) { #>

}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
<#  } 
  	if (Xml.LesserThanVersionOne) { #>

ARCANE_}
 
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
<#  } #>

#endif