<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<# // I - Marco for External definition of option types call by service implementatation #>

#define REGISTER_STRONG_OPTIONS_<#= Xml.ClassName.ToUpper() #>() \
namespace <#= Xml.ClassName #>OptionsNames{ \
using namespace StrongOptions; \
<# foreach(var simple in Xml.Simple) { #>
	DECLARE_OPTION(<#= simple.Name.ToFuncName() #>,<#= simple.type.QualifiedName() #>); \
<# } #>
<# foreach(var enumerator in Xml.Enumeration) { #>
	DECLARE_OPTION(<#= enumerator.Name.ToFuncName() #>,<#= enumerator.type #>); \
<# } #>
<# foreach(var service in Xml.ServiceInstance) { #>
	DECLARE_OPTION(<#= service.Name.ToFuncName() #>,<#= service.type #>*); \
<# } #>
<# foreach(var complex in Xml.Complex.Where( p => !p.IsRef) ) { #>
	DECLARE_OPTION(<#= complex.Name.ToFuncName() #>,IOptions<#= Xml.ClassName #>::I<#= complex.type #>*); \
<# } #>
<# // I - Types for complex options #>
<# // #>
<# foreach(var complex in Xml.FlatteningComplex.Where(p => !p.IsRef) ) { #>
namespace <#= complex.type #>OptionsNames{ \
<# foreach(var simple in complex.Xml.Simple) { #>
DECLARE_OPTION(<#= simple.Name.ToFuncName() #>,<#= simple.type.QualifiedName() #>); \
<# } #>
<# foreach(var enumerator in complex.Xml.Enumeration) { #>
DECLARE_OPTION(<#= enumerator.Name.ToFuncName() #>,<#= enumerator.type #>); \
<# } #>
<# foreach(var service in complex.Xml.ServiceInstance) { #>
DECLARE_OPTION(<#= service.Name.ToFuncName() #>,<#= service.type #>*); \
<# } #>
<# foreach(var sub_complex in complex.Xml.Complex.Where( p => !p.IsRef) ) { #>
DECLARE_OPTION(<#= sub_complex.Name.ToFuncName() #>,IOptions<#= Xml.ClassName #>::I<#= sub_complex.type #>*); \
<# } #>
} \
<# } #>
} \

<# // II - Marco for register service instance call by service implementatation #>

#define REGISTER_INSTANCE_<#= Xml.ClassName.ToUpper() #>(instance_name, class_name, interface_name, strong_name) \
template <> std::unique_ptr<InstanceBuilder<interface_name>> InstanceBuilder<interface_name>::m_instance = NULL; \
namespace { InstanceRegisterer<interface_name,class_name,strong_name> ARCANE_JOIN_WITH_LINE(Registerer_)(#instance_name); }	
		
		
		
		