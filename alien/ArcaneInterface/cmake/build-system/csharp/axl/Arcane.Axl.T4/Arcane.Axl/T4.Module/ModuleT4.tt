<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
// #WARNING#: This file has been generated automatically. Do not edit.
// Arcane version <#= Version #> : <#= DateTime.Now #>
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#ifndef ARCANE_MODULE_<#= Xml.ClassName.ToUpper() #>_H
#define ARCANE_MODULE_<#= Xml.ClassName.ToUpper() #>_H

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#include "arcane/VariableTypes.h"
#include "arcane/EntryPoint.h"
#include "arcane/ISubDomain.h"
#include "arcane/ModuleBuildInfo.h"
#include "arcane/ModuleFactory.h"
#include "arcane/ServiceRegisterer.h"
#include "arcane/BasicModule.h"
#include "arcane/ServiceInfo.h"

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

ARCANE_BEGIN_NAMESPACE
class ISubDomain;
class IModule;
ARCANE_}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
<#  if (Xml.LesserThanVersionOne) { #>

ARCANE_BEGIN_NAMESPACE
 
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
<# 	}
	if(Xml.NamespaceMacroName != null) { #>

<#= Xml.NamespaceMacroName #>_BEGIN_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
<#  } 
    if(Xml.NamespaceName != null) { #>

namespace <#= Xml.NamespaceName #> {

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
<#  } #>

class CaseOptions<#= Xml.ClassName #>;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

//! Generation de la classe de base du Module
class Arcane<#= Xml.ClassName #>Object
  : public Arcane::BasicModule
{
public:

  static Arcane::IServiceInfo* serviceInfoCreateFunction(const Arcane::String& name)
  {
    Arcane::IServiceInfo* si = new Arcane::ServiceInfo(name, Arcane::VersionInfo("0.0"),
                                                       Arcane::IServiceInfo::Dim2 |
                                                       Arcane::IServiceInfo::Dim3);
    return si;
  }

public:

  Arcane<#= Xml.ClassName #>Object(const Arcane::ModuleBuildInfo& mb)
    : Arcane::BasicModule(mb)
<#  if (Xml.Options.Count() > 0) { #>
    , m_options(NULL)
<#  } #>
<#  foreach(var v in Module.Variables) { #>
    , m_<#= v.fieldname #>(Arcane::VariableBuildInfo(this, "<#= v.name #>"<#
      if(v.NbProperty > 0) { 
    #>, Arcane::IVariable::P<#= v.FirstProperty.ToString () #><# 
        foreach(var p in v.OthersProperties) {
    #>| Arcane::IVariable::P<#= p.ToString () #><#
        } 
      } #>))
<#  } #>
  {
<#  if (Xml.Options.Count() > 0) { #>
    m_options = new CaseOptions<#= Xml.ClassName #>(mb.m_sub_domain->caseMng());
    m_options->setCaseModule(this);
<#  }

    foreach(var ep in Module.EntryPoints) { #>
    addEntryPoint(this, "<#= ep.name #>", 
                  &Arcane<#= Xml.ClassName #>Object::<#= ep.methodname #>,
                  Arcane::IEntryPoint::<#= ep.@where.Name () #>,
                  Arcane::IEntryPoint::<#= ep.property.Name () #>);
<#  } #>
  }

  virtual ~Arcane<#= Xml.ClassName #>Object()
  {
<#  if (Xml.Options.Count() > 0) { #>
    delete m_options;
<#  } #>
  }

public:

  //! points d'entrée
<#  foreach(var ep in Module.EntryPoints) { #>
  virtual void <#= ep.methodname #>() = 0; // <#= ep.methodname.ToClassName () #>
<#  } #>

<#  if (Xml.Options.Count() > 0) { #>
  //! Options du jeu de données du module
  CaseOptions<#= Xml.ClassName #>* options() const { return m_options; }

private:

  //! Options du jeu de données du module
  CaseOptions<#= Xml.ClassName #>* m_options;
<#  } #>

protected:

  //! Variables du module
<#  foreach(var v in Module.Variables) { 
      if(v.IsInFlow) { #>
  const Arcane::<#= v.ClassName #> m_<#= v.fieldname #>;
<#    } else { #>
  Arcane::<#= v.ClassName #> m_<#= v.fieldname #>;
<#    }
    } #>
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#define ARCANE_REGISTER_MODULE_<#= Xml.ClassName.ToUpper() #>(class_name) \
extern "C++" ARCANE_EXPORT Arcane::IModuleFactoryInfo* \
arcaneCreateModuleFactory<#= Xml.ClassName #>(Arcane::IServiceInfo* si) \
{ \
  return new Arcane::ModuleFactory(si,new Arcane::ModuleFactory2T< class_name > ("<#= Xml.ClassName #>"),<#= Module.autoload.ToString ().ToLower () #>); \
} \
Arcane::ServiceRegisterer ARCANE_EXPORT globalModuleRegisterer<#= Xml.ClassName #>(arcaneCreateModuleFactory<#= Xml.ClassName #>,"<#= Xml.ClassName #>")

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
<#  if(Xml.NamespaceMacroName != null) { #>

<#= Xml.NamespaceMacroName #>_}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
<#  } 
    if(Xml.NamespaceName != null) { #>

}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
<#  } 
	if (Xml.LesserThanVersionOne) { #>

ARCANE_}
 
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
<#  } #>

#endif
