<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#  Action<OptionHandler> enumStringConversionSection = (OptionHandler _xml) => { #>
<# // #>
<# // belle verrue en attendant ArcCore
	string string_format = null;
	if(SimpleTypeExtensions.Namespace() == "Arcane")
		string_format = "Arcane::String::format";
	else
		string_format = SimpleTypeExtensions.Namespace() + "::String::format";
#>
<# foreach(var enumerator in _xml.Enumeration) { #>
  static <#= enumerator.type  #> stringTo<#= enumerator.Name.ToFuncName().FirstCharToUpper() #>Enum(std::string <#= enumerator.Name.DashToUnderscore() #>_s)
  {
<# 	 foreach(var enumvalue in enumerator.enumvalue) { #>
<# 		if(enumvalue == enumerator.enumvalue.First()) { #>
    if(<#= enumerator.Name.DashToUnderscore() #>_s.compare("<#= enumvalue.Name.ToLower() #>")==0)
      return <#= enumvalue.genvalue #>;
<#		} #>
<# 		else { #>
    else if(<#= enumerator.Name.DashToUnderscore() #>_s.compare("<#= enumvalue.Name.ToLower() #>")==0)
      return <#= enumvalue.genvalue #>;
<#		} #>
<#	 } #>
    else
      throw <#=SimpleTypeExtensions.Namespace()#>::FatalErrorException(A_FUNCINFO, <#=string_format#>("<#= enumerator.Name  #> enum name: {0} is not consistent with axl definition", <#= enumerator.Name.DashToUnderscore() #>_s));
  }

  static std::string <#= enumerator.Name.ToFuncName() #>EnumToString(<#= enumerator.type  #> <#= enumerator.Name.DashToUnderscore() #>)
  {
    switch (<#= enumerator.Name.DashToUnderscore() #>)
    {
<# 	 foreach(var enumvalue in enumerator.enumvalue) { #>
      case <#= enumvalue.genvalue #>:
        return "<#= enumvalue.Name.ToLower() #>";
<#	 } #>
      default:
        throw <#=SimpleTypeExtensions.Namespace()#>::FatalErrorException(A_FUNCINFO, <#=string_format#>("Unmanaged <#= enumerator.type  #> value: {0}",<#= enumerator.Name.DashToUnderscore() #>));
    }	
  }

<#	} #>
<# }; #>

<# var non_ref_complex = Xml.FlatteningComplex.Where(p => !p.IsRef); #>
<# var enum_count = Xml.Enumeration.Count();
   foreach(var complex in non_ref_complex )
	 enum_count = enum_count + Xml.Enumeration.Count();
#>
<# if(enum_count>0)  { #>
#ifndef ARCANE_OPTIONS_<#= Xml.ClassName.ToUpper() #>_UTILS_H
#define ARCANE_OPTIONS_<#= Xml.ClassName.ToUpper() #>_UTILS_H

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

class Options<#= Xml.ClassName #>Utils
{
public:
<# // I - Complex Options Definition #>
<# // #>
<# foreach(var complex in non_ref_complex ) { #>
<# enumStringConversionSection(complex.Xml); #>
<# } #>
<# enumStringConversionSection(Xml); #>
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif // ARCANE_OPTIONS_<#= Xml.ClassName.ToUpper() #>_UTILS_H
<# } #>	
