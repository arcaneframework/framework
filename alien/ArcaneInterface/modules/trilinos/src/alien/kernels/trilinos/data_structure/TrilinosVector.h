// -*- C++ -*-
#ifndef ALIEN_TRILINOSIMPL_TRILINOSVECTOR_H
#define ALIEN_TRILINOSIMPL_TRILINOSVECTOR_H
/* Author : mesriy at Tue Jul 24 14:28:21 2012
 * Generated by createNew
 */

#include <alien/kernels/trilinos/TrilinosPrecomp.h>
#include <alien/core/impl/IVectorImpl.h>
#include <alien/data/ISpace.h>
#include <alien/distribution/VectorDistribution.h>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

BEGIN_TRILINOSINTERNAL_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
template <typename ValueT, typename TagT> class VectorInternal;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

END_TRILINOSINTERNAL_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

namespace Alien {

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
template <typename ValueT, typename TagT> class TrilinosVector : public IVectorImpl
{
 public:
  typedef TrilinosInternal::VectorInternal<ValueT, TagT> VectorInternal;

 public:
  TrilinosVector(const MultiVectorImpl* multi_impl);

  virtual ~TrilinosVector();

 public:
  void init(const VectorDistribution& dist, const bool need_allocate);
  void allocate();

  void free() {}
  void clear() {}

 public:
  void setValues(const int nrows, ValueT const* values);

  void getValues(const int nrows, ValueT* values) const;

  ValueT* getDataPtr() { return nullptr; }

  ValueT const* getDataPtr() const { return nullptr; }

  ValueT norm1() const;

  ValueT norm2() const;

  ValueT dot(TrilinosVector const& y) const;

 public:
  VectorInternal* internal() { return m_internal.get(); }

  const VectorInternal* internal() const { return m_internal.get(); }

  void dump() const;
  void dump(std::string const& filename) const;

 private:
  bool assemble();

 private:
  std::unique_ptr<VectorInternal> m_internal;
  int m_local_offset;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

} // namespace Alien

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif /* ALIEN_TRILINOSIMPL_TRILINOSVECTOR_H */
