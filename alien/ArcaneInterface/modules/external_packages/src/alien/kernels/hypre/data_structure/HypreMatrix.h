// -*- C++ -*-
#ifndef ALIEN_KERNELS_HYPRE_DATASTRUCTURE_HYPREMATRIX_H
#define ALIEN_KERNELS_HYPRE_DATASTRUCTURE_HYPREMATRIX_H
/* Author : havep at Wed Jul 18 14:46:45 2012
 * Generated by createNew
 */

#include <alien/core/impl/IMatrixImpl.h>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

namespace Alien {

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

namespace Internal {

  /*---------------------------------------------------------------------------*/
  /*---------------------------------------------------------------------------*/

  class MatrixInternal;

  /*---------------------------------------------------------------------------*/
  /*---------------------------------------------------------------------------*/

} // namespace Internal

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

class HypreMatrix : public IMatrixImpl
{
 public:
  typedef Internal::MatrixInternal MatrixInternal;

 public:
  HypreMatrix(const MultiMatrixImpl* multi_impl);
  virtual ~HypreMatrix();

 public:
  void clear() {}

 public:
  bool initMatrix(const int ilower, const int iupper, const int jlower, const int jupper,
      const Arccore::ConstArrayView<Arccore::Integer>& lineSizes);

  bool addMatrixValues(const int nrow, const int* rows, const int* ncols, const int* cols,
      const Arccore::Real* values);

  bool setMatrixValues(const int nrow, const int* rows, const int* ncols, const int* cols,
      const Arccore::Real* values);

  bool assemble();

 public:
  MatrixInternal* internal() { return m_internal; }
  const MatrixInternal* internal() const { return m_internal; }

  Arccore::MessagePassing::IMessagePassingMng* getParallelMng() const { return m_pm; }

 private:
  Arccore::Integer ijk(Arccore::Integer i, Arccore::Integer j, Arccore::Integer k,
      Arccore::Integer block_size, Arccore::Integer unknowns_num) const
  {
    return k * block_size + i * unknowns_num + j;
  }

  MatrixInternal* m_internal;
  Arccore::MessagePassing::IMessagePassingMng* m_pm;
};

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

} // namespace Alien

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif /* ALIEN_KERNELS_HYPRE_DATASTRUCTURE_HYPREMATRIX_H */
