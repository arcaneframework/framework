#include "MTLVector.h"
/* Author : mesriy at Tue Jul 24 15:28:21 2012
 * Generated by createNew
 */

#include <alien/kernels/mtl/data_structure/MTLInternal.h>
#include <alien/kernels/mtl/MTLBackEnd.h>
#include <alien/core/block/Block.h>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

namespace Alien {

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

MTLVector::MTLVector(const MultiVectorImpl* multi_impl)
: IVectorImpl(multi_impl, AlgebraTraits<BackEnd::tag::mtl>::name())
, m_internal(nullptr)
, m_local_offset(0)
{
}

/*---------------------------------------------------------------------------*/

MTLVector::~MTLVector()
{
  delete m_internal;
}

/*---------------------------------------------------------------------------*/

void
MTLVector::init(const VectorDistribution& dist, const bool need_allocate)
{
  if (need_allocate)
    allocate();
}

/*---------------------------------------------------------------------------*/

void
MTLVector::allocate()
{
  delete m_internal;
  const VectorDistribution& dist = this->distribution();
  m_local_offset = dist.offset();

#ifdef USE_PMTL4
  const Block* block = this->block();
  if (block) {
    std::vector<std::size_t> offsets;
    block->computeOffsets(dist, offsets);
    mtl::par::block_distribution row_dist(offsets);
    m_internal = new VectorInternal(dist.globalSize(), row_dist);
  } else
    throw FatalErrorException(A_FUNCINFO, "Requesting not available block information");
#else
  m_internal = new VectorInternal(this->scalarizedLocalSize());
  // Sinon bug!! car valeurs non initialisÃ©es
  m_internal->m_internal = 0.;
#endif
}

/*---------------------------------------------------------------------------*/

void
MTLVector::setValues(const int nrow, const double* values)
{
  for (int i = 0; i < nrow; ++i) {
    m_internal->m_internal[m_local_offset + i] = values[i];
  }
}

/*---------------------------------------------------------------------------*/
void
MTLVector::getValues(const int nrow, double* values) const
{
  for (int i = 0; i < nrow; ++i)
    values[i] = m_internal->m_internal[m_local_offset + i];
}

void
MTLVector::dump() const
{
  std::cout << m_internal->m_internal;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

} // namespace Alien

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
