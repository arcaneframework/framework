/* Author : havep at Mon Jul 11 10:27:22 2011
 * Generated by createNew
 */

#include <alien/kernels/petsc/linear_solver/hypre/PETScPrecConfigHypreEuclidService.h>
#include <ALIEN/axl/PETScPrecConfigHypreEuclid_StrongOptions.h>
#include <petscpc.h>

#include <arccore/message_passing/IMessagePassingMng.h>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

// BEGIN_LINEARALGEBRA2SERVICE_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
namespace Alien {

/** Constructeur de la classe */
#ifdef ALIEN_USE_ARCANE
PETScPrecConfigHypreEuclidService::PETScPrecConfigHypreEuclidService(
    const Arcane::ServiceBuildInfo& sbi)
: ArcanePETScPrecConfigHypreEuclidObject(sbi)
, PETScConfig(sbi.subDomain()->parallelMng()->isParallel())
{
  ;
}
#endif
PETScPrecConfigHypreEuclidService::PETScPrecConfigHypreEuclidService(
    Arccore::MessagePassing::IMessagePassingMng* parallel_mng,
    std::shared_ptr<IOptionsPETScPrecConfigHypreEuclid> options)
: ArcanePETScPrecConfigHypreEuclidObject(options)
, PETScConfig(parallel_mng->commSize() > 1)
{
}

//! Initialisation
void
PETScPrecConfigHypreEuclidService::configure(PC& pc, [[maybe_unused]] const ISpace& space,
                                             [[maybe_unused]] const MatrixDistribution& distribution)
{
  alien_debug([&] { cout() << "configure PETSc euclid preconditioner"; });
  checkError("Set preconditioner", PCSetType(pc, PCHYPRE));
  checkError("Set Hypre preconditioner", PCHYPRESetType(pc, "euclid"));
  {
    std::stringstream opt;
    opt << options()->levels();
#ifdef PETSC_OPTIONSSETVALUE_OLD
    checkError("Set Hypre Euclid levels",
        PetscOptionsSetValue("pc_hypre_euclid_levels", opt.str().c_str()));
#else
    checkError("Set Hypre Euclid levels",
        PetscOptionsSetValue(NULL, "pc_hypre_euclid_levels", opt.str().c_str()));
#endif
  }
  {
    std::stringstream opt;
    opt << options()->useBlockJacobi();
#ifdef PETSC_OPTIONSSETVALUE_OLD
    checkError("Set Hypre Euclid block jacobi",
        PetscOptionsSetValue("pc_hypre_euclid_bj", opt.str().c_str()));
#else
    checkError("Set Hypre Euclid block jacobi",
        PetscOptionsSetValue(NULL, "pc_hypre_euclid_bj", opt.str().c_str()));
#endif
  }
  {
    std::stringstream opt;
    opt << options()->printStatistics();
#ifdef PETSC_OPTIONSSETVALUE_OLD
    checkError("Set Hypre Euclid statistics",
        PetscOptionsSetValue("pc_hypre_euclid_print_statistics", opt.str().c_str()));
#else
    checkError("Set Hypre Euclid statistics",
        PetscOptionsSetValue(
            NULL, "pc_hypre_euclid_print_statistics", opt.str().c_str()));
#endif
  }
  checkError("Set Hypre Euclid options", PCSetFromOptions(pc));
  // checkError("Hypre Euclid Viewer",PCView(pc,PETSC_NULL));
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

ARCANE_REGISTER_SERVICE_PETSCPRECCONFIGHYPREEUCLID(
    HypreEuclid, PETScPrecConfigHypreEuclidService);

} // namespace Alien

REGISTER_STRONG_OPTIONS_PETSCPRECCONFIGHYPREEUCLID();

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

// END_LINEARALGEBRA2SERVICE_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
