/* Author : havep at Mon Jun 30 18:00:20 2008
 * Generated by createNew
 */

#include <alien/kernels/petsc/linear_solver/arcane/PETScSolverConfigCustomService.h>
#include <ALIEN/axl/PETScSolverConfigCustom_StrongOptions.h>

#include <arccore/message_passing/IMessagePassingMng.h>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

namespace Alien {

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

/** Constructeur de la classe */

#ifdef ALIEN_USE_ARCANE
PETScSolverConfigCustomService::PETScSolverConfigCustomService(
    const Arcane::ServiceBuildInfo& sbi)
: ArcanePETScSolverConfigCustomObject(sbi)
, PETScConfig(sbi.subDomain()->parallelMng()->isParallel())
{
  ;
}
#endif

PETScSolverConfigCustomService::PETScSolverConfigCustomService(
    Arccore::MessagePassing::IMessagePassingMng* parallel_mng,
    std::shared_ptr<IOptionsPETScSolverConfigCustom> options)
: ArcanePETScSolverConfigCustomObject(options)
, PETScConfig(parallel_mng->commSize() > 1)
{
  ;
}

//! Initialisation
void
PETScSolverConfigCustomService::configure(KSP& ksp,
                                          [[maybe_unused]] const ISpace& space,
                                          [[maybe_unused]] const MatrixDistribution& distribution)
{
  alien_debug([&] { cout() << "configure PETSc custom solver"; });
  Arccore::String prefix = Arccore::String::format("{0}_", this);

  auto petsc_options = options()->option();
  for (Arccore::Integer i = 0; i < petsc_options.size(); ++i) {
    Arccore::String name = petsc_options[i]->name();
    Arccore::String value = petsc_options[i]->value();
#ifdef PETSC_OPTIONSSETVALUE_OLD
    checkError("Set CommandLine Option ",
        PetscOptionsSetValue(localstr(format("-{0}{1}", prefix, name)), localstr(value)));
#else
    checkError("Set CommandLine Option ",
        PetscOptionsSetValue(NULL,
            Arccore::String::format("-{0}{1}", prefix, name).localstr(),
            value.localstr()));
#endif
  }
  checkError(
      "Set CommandLine Option Prefix", KSPSetOptionsPrefix(ksp, prefix.localstr()));
  checkError("Configure solver from options", KSPSetFromOptions(ksp));
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

ARCANE_REGISTER_SERVICE_PETSCSOLVERCONFIGCUSTOM(Custom, PETScSolverConfigCustomService);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

} // namespace Alien

REGISTER_STRONG_OPTIONS_PETSCSOLVERCONFIGCUSTOM();

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
