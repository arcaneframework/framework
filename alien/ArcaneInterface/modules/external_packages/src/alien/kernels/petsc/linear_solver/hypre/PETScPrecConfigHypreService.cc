/* Author : havep at Tue Jul 29 18:45:26 2008
 * Generated by createNew
 */

#include <alien/kernels/petsc/linear_solver/hypre/PETScPrecConfigHypreService.h>
#include <ALIEN/axl/PETScPrecConfigHypre_StrongOptions.h>
// using namespace Arcane;
// using namespace Alien;

#include <arccore/base/NotImplementedException.h>
#include <arccore/message_passing/IMessagePassingMng.h>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

// BEGIN_LINEARALGEBRA2SERVICE_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
namespace Alien {
/** Constructeur de la classe */
#ifdef ALIEN_USE_ARCANE
PETScPrecConfigHypreService::PETScPrecConfigHypreService(
    const Arcane::ServiceBuildInfo& sbi)
: ArcanePETScPrecConfigHypreObject(sbi)
, PETScConfig(sbi.subDomain()->parallelMng()->isParallel())
{
  ;
}
#endif
PETScPrecConfigHypreService::PETScPrecConfigHypreService(
    Arccore::MessagePassing::IMessagePassingMng* parallel_mng,
    std::shared_ptr<IOptionsPETScPrecConfigHypre> options)
: ArcanePETScPrecConfigHypreObject(options)
, PETScConfig(parallel_mng->commSize() > 1)
{
}

void
PETScPrecConfigHypreService::configure(
    PC& pc, const ISpace& space, const MatrixDistribution& distribution)
{
  alien_debug([&] { cout() << "configure PETSc hypre preconditioner"; });
  // if(options()->fieldSplitMode())
  checkError("Set preconditioner", PCSetType(pc, PCHYPRE));

  // for more options see
  // http://www-unix.mcs.anl.gov/petsc/petsc-as/snapshots/petsc-current/docs/manualpages/PC/PCHYPRE.html

  switch (options()->type()) {
  case PETScPrecConfigHypreOptions::PILUT:
    checkError("Set Hypre preconditioner", PCHYPRESetType(pc, "pilut"));
    break;
  case PETScPrecConfigHypreOptions::AMG:
    checkError("Set Hypre preconditioner", PCHYPRESetType(pc, "boomeramg"));
    checkError("Set Hypre coarsening",
        PetscOptionsSetValue(NULL, "-pc_hypre_boomeramg_coarsen_type", "Falgout"));
    checkError("Set Hypre Interpolation type",
        PetscOptionsSetValue(NULL, "-pc_hypre_boomeramg_interp_type", "classical"));
    checkError("Set Hypre Relax type",
        PetscOptionsSetValue(NULL, "-pc_hypre_boomeramg_relax_type_all", "SOR/Jacobi"));
    checkError("Hypre AMG SetDebugFlag",
        PetscOptionsSetValue(NULL, "-pc_hypre_boomeramg_print_debug", "1"));
    PCSetFromOptions(pc);
    // Default option is reversed in PETSc (CF-Relaxation is default)
    // checkError("Set Hypre Relax order", PetscOptionsSetValue(NULL,
    // "-pc_hypre_boomeramg_CF","1"));
    break;
  case PETScPrecConfigHypreOptions::ParaSails:
    checkError("Set Hypre preconditioner", PCHYPRESetType(pc, "parasails"));
    break;
  case PETScPrecConfigHypreOptions::Euclid:
    checkError("Set Hypre preconditioner", PCHYPRESetType(pc, "euclid"));
    break;
  default:
    throw Arccore::NotImplementedException(A_FUNCINFO, "Undefined Hypre type");
  }
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

ARCANE_REGISTER_SERVICE_PETSCPRECCONFIGHYPRE(Hypre, PETScPrecConfigHypreService);

} // namespace Alien

REGISTER_STRONG_OPTIONS_PETSCPRECCONFIGHYPRE();
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

// END_LINEARALGEBRA2SERVICE_NAMESPACE

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
