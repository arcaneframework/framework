/* Author : havep at Fri Jul  4 09:15:48 2008
 * Generated by createNew
 */

#include <alien/kernels/petsc/linear_solver/arcane/PETScPrecConfigAdditiveSchwarzService.h>
#include <ALIEN/axl/PETScPrecConfigAdditiveSchwarz_StrongOptions.h>

#include <arccore/base/NotImplementedException.h>
#include <arccore/message_passing/IMessagePassingMng.h>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

namespace Alien {

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
#ifdef ALIEN_USE_ARCANE
PETScPrecConfigAdditiveSchwarzService::PETScPrecConfigAdditiveSchwarzService(
    const Arcane::ServiceBuildInfo& sbi)
: ArcanePETScPrecConfigAdditiveSchwarzObject(sbi)
, PETScConfig(sbi.subDomain()->parallelMng()->isParallel())
{
  ;
}
#endif

PETScPrecConfigAdditiveSchwarzService::PETScPrecConfigAdditiveSchwarzService(
    Arccore::MessagePassing::IMessagePassingMng* parallel_mng,
    std::shared_ptr<IOptionsPETScPrecConfigAdditiveSchwarz> options)
: ArcanePETScPrecConfigAdditiveSchwarzObject(options)
, PETScConfig(parallel_mng->commSize() > 1)
{
  ;
}

bool
PETScPrecConfigAdditiveSchwarzService::needPrematureKSPSetUp() const
{
  return false;
}
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

void
PETScPrecConfigAdditiveSchwarzService::configure(
    PC& pc, const ISpace& space, const MatrixDistribution& distribution)
{
  alien_debug([&] { cout() << "configure PETSc additive schwarz preconditioner"; });
  checkError("Set preconditioner", PCSetType(pc, PCASM));
  // KSPSetUp has been already called (cf needPrematureKSPSetUp)
  // you can set up sub solver using PCASMGetSubKSP
  // details in
  // http://www-unix.mcs.anl.gov/petsc/petsc-as/snapshots/petsc-current/src/ksp/ksp/examples/tutorials/ex8.c.html

  int asm_overlap = options()->localBlocks();
  if (asm_overlap > 0)
    checkError("Set AdditiveSchwarz overlap", PCASMSetOverlap(pc, asm_overlap));
  else {
    alien_fatal(
        [&] { cout() << "AdditiveSchwarz does not allow non-positive overlapping"; });
  }

  int local_blocks = options()->localBlocks();
  if (local_blocks <= 0) {
    alien_fatal([&] {
      cout() << "AdditiveSchwarz does not allow non-positive local blocks number";
    });
  } else if (local_blocks > 1) {
    checkError("Set AdditiveSchwarz blocks",
        PCASMSetLocalSubdomains(pc, local_blocks, nullptr, nullptr));
  }
  // else 1 : default
  switch (options()->type()) {
  case PETScPrecConfigAdditiveSchwarzOptionTypes::Basic:
    checkError("Set AdditiveSchwarz type", PCASMSetType(pc, PC_ASM_BASIC));
    break;
  case PETScPrecConfigAdditiveSchwarzOptionTypes::Restrict:
    checkError("Set AdditiveSchwarz type", PCASMSetType(pc, PC_ASM_RESTRICT));
    break;
  case PETScPrecConfigAdditiveSchwarzOptionTypes::Interpolate:
    checkError("Set AdditiveSchwarz type", PCASMSetType(pc, PC_ASM_INTERPOLATE));
    break;
  case PETScPrecConfigAdditiveSchwarzOptionTypes::None:
    checkError("Set AdditiveSchwarz type", PCASMSetType(pc, PC_ASM_NONE));
    break;
  default:
    throw Arccore::NotImplementedException(A_FUNCINFO, "Undefined AdditiveSchwarz type");
  }

  checkError("Preconditioner setup", PCSetUp(pc));

  // Extract the array of KSP contexts for the local blocks
  PetscInt nlocal, first;
  KSP* subksp;
  checkError(
      "Preconditioner gets sub-solvers", PCASMGetSubKSP(pc, &nlocal, &first, &subksp));
  //
  IPETScKSP* ksp_solver = options()->subSolver();
  for (Arccore::Integer i = first; i < nlocal; i++) {
    ksp_solver->configure(subksp[i], space, distribution);
  }
}

ARCANE_REGISTER_SERVICE_PETSCPRECCONFIGADDITIVESCHWARZ(
    AdditiveSchwarz, PETScPrecConfigAdditiveSchwarzService);

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

} // namespace Alien

REGISTER_STRONG_OPTIONS_PETSCPRECCONFIGADDITIVESCHWARZ();

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
