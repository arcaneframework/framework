// -*- C++ -*-
#ifndef ALIEN_IFPSOLVERIMPL_IFPVECTOR_H
#define ALIEN_IFPSOLVERIMPL_IFPVECTOR_H
/* Author : havep at Fri Jul 20 13:16:22 2012
 * Generated by createNew
 */

#include <alien/kernels/ifp/IFPSolverPrecomp.h>
#include <alien/kernels/ifp/data_structure/IFPSolverInternal.h>
#include <alien/core/impl/IVectorImpl.h>
#include <alien/data/ISpace.h>

/*---------------------------------------------------------------------------*/

BEGIN_IFPSOLVERINTENRAL_NAMESPACE

class VectorInternal;

END_IFPSOLVERINTERNAL_NAMESPACE

/*---------------------------------------------------------------------------*/

class SimpleCSR_to_IFP_VectorConverter;

namespace Alien {

/*---------------------------------------------------------------------------*/

class MultiVectorImpl;

/*---------------------------------------------------------------------------*/

class IFPVector : public IVectorImpl
{
 public:
  friend class ::SimpleCSR_to_IFP_VectorConverter;
  typedef IFPSolverInternal::VectorInternal VectorInternal;

 public:
  IFPVector(const MultiVectorImpl* multi_impl);

  virtual ~IFPVector();

 public:
  bool isResizable() const { return m_resizable_block_size; }

  void setResizable(bool resizable) { m_resizable_block_size = resizable; }

  void init(const VectorDistribution& dist, const bool need_allocate);

  bool allocate();
  bool allocate(bool resizable);
  bool freeData();

  void clear() { freeData(); }

  void update(const IFPVector& v);
  /*
    void update(const PETScVector & v);
    void update(const MTLVector & v);
    void update(const HypreVector & v);
    void update(const MCGVector & v);
  */

  void setValues(
      double const* values, Integer const* node_list, Integer const* node_to_local_node);
  void setExtraValues(double const* values);

 private:
  void setValues(double const* values);
  void addValues(double const* values);

 public:
  bool getValues(int nrows, int* rows, double* values) const;
  bool getValues(int nrows, double* values) const;
  bool getExtraValues(double* values) const;

 public:
  VectorInternal* internal() { return m_internal; }
  const VectorInternal* internal() const { return m_internal; }

 private:
  void _check() const;

 private:
  VectorInternal* m_internal;
  const MultiVectorImpl* m_multi_impl;
  bool m_resizable_block_size;
  Integer m_is_rhs;
};

/*---------------------------------------------------------------------------*/

} // namespace Alien

/*---------------------------------------------------------------------------*/

#endif /* ALIEN_IFPSOLVERIMPL_IFPVECTOR_H */
