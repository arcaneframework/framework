// -*- C++ -*-
#ifndef ALIEN_IFPSOLVERIMPL_IFPMATRIX_H
#define ALIEN_IFPSOLVERIMPL_IFPMATRIX_H
/* Author : havep at Fri Jul 20 13:16:25 2012
 * Generated by createNew
 */

#include <alien/kernels/ifp/IFPSolverPrecomp.h>
#include <alien/core/impl/IMatrixImpl.h>
#include <alien/data/Space.h>
#include <alien/AlienIFPENSolversPrecomp.h>

/*---------------------------------------------------------------------------*/

BEGIN_IFPSOLVERINTENRAL_NAMESPACE

class MatrixInternal;

END_IFPSOLVERINTERNAL_NAMESPACE

/*---------------------------------------------------------------------------*/

namespace Alien {

/*---------------------------------------------------------------------------*/

class MultiMatrixImpl;

/*---------------------------------------------------------------------------*/

class ALIEN_IFPEN_SOLVERS_EXPORT IFPMatrix : public IMatrixImpl
{
 public:
  typedef IFPSolverInternal::MatrixInternal MatrixInternal;

 public:
  IFPMatrix(const MultiMatrixImpl* multi_impl);
  virtual ~IFPMatrix();

 public:
  void initSpace0(const Space& space) { m_space0 = &space; }

  void initSpace1(const Space& space) { m_space1 = &space; }

  const ISpace& space() const
  {
    if (m_space0)
      return *m_space0;
    else
      return IMatrixImpl::rowSpace();
  }

  const Space& space0() const { return *m_space0; }

  const Space& space1() const { return *m_space1; }

  void free() { freeGraphData(); }

  void clear() { freeData(); }

  bool isGraphInitialized() const { return m_graph_initialized; }

  void setSumFirstEq(bool flag) { m_sum_first_eq = flag ? 1 : 0; }

 public:
  bool initMatrix(Integer links_num, // num of links
      Integer global_nodes_num, // global num of nodes
      Integer nodes_num, // num of nodes [includes ghost nodes]
      Integer local_nodes_num, // num of nodes in linear system [without ghost nodes]
      Integer max_node_id, // max node id
      Integer equations_num, // num of equations by link
      Integer unknowns_num, // num of unknowns by link
      Integer* nodeList, // list of nodes as local Arcane num [size=nodes_num]
      Integer* globalNodeList, // list of nodes as global Arcane num [size=nodes_num]
      Integer* nodeToLocalRow, Integer* rowUidList,
      Integer* i_node, // list of nodes i of links (ij) [local index; size=links_num]
      Integer* global_i_node, // idem but global index
      Integer* j_node, // list of nodes i of links (ij)
      Integer* global_j_node // idem but global index
      );

  bool initMatrix(Integer links_num, // num of links
      Integer global_nodes_num, // global num of nodes
      Integer nodes_num, // num of nodes [includes ghost nodes]
      Integer local_nodes_num, // num of nodes in linear system [without ghost nodes]
      Integer max_node_id, // max node id
      Integer equations_num, // num of equations by link
      Integer unknowns_num, // num of unknowns by link
      Integer* nodeList, // list of nodes as local Arcane num [size=nodes_num]
      Integer* globalNodeList, // list of nodes as global Arcane num [size=nodes_num]
      Integer* nodeToLocalRow, Integer* rowUidList,
      Integer* i_node, // list of nodes i of links (ij) [local index; size=links_num]
      Integer* global_i_node, //    idem but global index
      Integer* j_node, // list of nodes i of links (ij)
      Integer* global_j_node, // idem but global index
      Integer* ass_elem_node_ptr, // List of offset of Associated element List
      Integer* ass_elem_node, // List of Associated elements of links
      Integer* global_ass_elem_node, // idem with global index
      Integer extra_eq_num, // num of well equations
      Integer global_extra_eq_num, // global num of well equations
      Integer* extra_eq_ids, // well equation ids
      Integer* extra_eq_elem_node_ptr, // perf node offset
      Integer* extra_eq_elem_node // perf node ids
      );
  bool initMatrix(int equations_num, int unknowns_num, int global_nodes_num,
      int nodes_num, int row_offset, ConstArrayView<Integer> columnIndexesPtr,
      ConstArrayView<Integer> columnIndexes, Int64 timestamp);

  // version BlockTailleVariable
  bool initMatrix(Integer links_num, // num of links
      Integer global_nodes_num, // global num of nodes
      Integer nodes_num, // num of nodes [includes ghost nodes]
      Integer local_nodes_num, // num of nodes in linear system [without ghost nodes]
      Integer max_node_id, // max node id
      Integer equations_num, // num of equations by link
      Integer unknowns_num, // num of unknowns by link
      Integer* unknowns_num_per_cell, // num of unknowns per cell
      Integer* nodeList, // list of nodes as local Arcane num [size=nodes_num]
      Integer* globalNodeList, // list of nodes as global Arcane num [size=nodes_num]
      Integer* nodeToLocalRow,
      Integer* i_node, // list of nodes i of links (ij) [local index; size=links_num]
      Integer* global_i_node, //    idem but global index
      Integer* j_node, // list of nodes i of links (ij)
      Integer* global_j_node, // idem but global index
      Integer* ass_elem_node_ptr, // List of offset of Associated element List
      Integer* ass_elem_node, // List of Associated elements of links
      Integer* global_ass_elem_node, // idem with global index
      Integer extra_eq_num, Integer global_extra_eq_num, Integer* extra_eq_ids,
      Integer* extra_eq_elem_node_ptr, Integer* extra_eq_elem_node,
      Integer* extra_eq_elem_node_lid);

  /*
  void initWellMatrix(Integer extra_eq_num,
                      Integer global_extra_eq_num,
                      Integer* extra_eq_ids,
                      Integer* extra_eq_elem_node_ptr,
                      Integer* extra_eq_elem_node,
                      Integer* extra_eq_elem_lid) ;

  bool initSubMatrix01(int nrow,
                       int global_nb_extra_eq,
                       int nb_extra_eq,
                       int const* row_offset,
                       int const* cols) ;

  bool initSubMatrix11(int nb_extra_eq,
                       int const* row_offset,
                       int const* cols) ;
  */

  bool allocate();

  bool allocate(ArrayView<Integer> coupled_ids);

  bool allocateRS(ArrayView<Integer> coupled_ids);

  bool setMatrixValues(const double* values);

  bool setMatrixBlockValues(const double* values);

  bool setMatrixValues(Real* dFijdXi, Real* dCidXi, Integer* nodeList,
      Integer* nodeToLocalRow, Integer* i_node, Integer* j_node);

  bool setMatrixValues(Real* dFijdXi, Real* dCidXi, Integer* nodeList,
      Integer* nodeToLocalRow, Integer* i_node, Integer* j_node,
      Integer* ass_elem_node_ptr);

  bool setMatrixValues(Real* dFijdXi, Real* MatFracFij, Real* dCidXi, Integer* nodeList,
      Integer* nodeToLocalRow, Integer* i_node, Integer* j_node,
      Integer* ass_elem_node_ptr, Integer NumOfLink1, Integer NumOfLink2);

  // A. Anciaux pour BlockTailleVariable
  bool setMatrixRsValues(Real* dFijdXi, Real* dCidXi, Integer* nodeList,
      Integer* nodeToLocalRow, Integer* i_node, Integer* j_node);

  bool setMatrixExtraValues(
      Real* ExtraRowValues, Real* ExtraColValues, Real* ExtraDiagValues);

  // A. Anciaux pour BlockTailleVariable
  bool setMatrixRsExtraValues(
      Real* ExtraRowValues, Real* ExtraColValues, Real* ExtraDiagValues);

  bool setInitValues(int nrows, const int* rows, double* values);

  bool initSubMatrix11Values(Real const* ExtraDiagValues);

  bool initSubMatrix10Values(Real const* ExtraRowValues);

  bool initSubMatrix01Values(Real const* ExtraColValues);

  bool setSymmetricProfile(bool value);

  bool getSymmetricProfile() const;

 public:
  MatrixInternal* internal() { return m_internal; }
  const MatrixInternal* internal() const { return m_internal; }

 private:
  //! Ensemble des tags pour la construction CprAMG
  bool computeEllipticSplitTags(UniqueArray<Integer>& split_tags, int equation_num) const;

  Integer ijk(
      Integer i, Integer j, Integer k, Integer block_size, Integer unknowns_num) const
  {
    return k * block_size + i * unknowns_num + j;
  }

  void freeData();
  void freeGraphData();

 private:
  MatrixInternal* m_internal;
  Integer* m_node_list_ref;

  //! conversion from arcane node numbering to graph node numbering (without ghost)
  Integer m_row_offset;

  bool m_graph_initialized;
  bool m_symmetric_profile;
  Integer m_sum_first_eq;

  Space const* m_space0;
  Space const* m_space1;
};

/*---------------------------------------------------------------------------*/

} // namespace Alien

/*---------------------------------------------------------------------------*/

#endif /* ALIEN_IFPSOLVERIMPL_IFPMATRIX_H */
