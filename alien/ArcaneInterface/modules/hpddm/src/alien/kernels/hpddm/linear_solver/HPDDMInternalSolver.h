// -*- C++ -*-
/* Author : couletj at Thu Jul 25 09:24:07 2019
 * Generated by createNew
 */

/* INFO: Les services et modules se conforment maintenant � la politique Arcane core.
 *       L'emploi des .h �tait fictif.
 *       D�sormais les d�clarations de classe pour les modules et services seront
 *       localis�es dans le fichier .cc correspondant.
 */

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#ifndef ALIEN_HPDDMINTERNALSOLVER_H
#define ALIEN_HPDDMINTERNALSOLVER_H
// Interface du service

#include <alien/utils/Precomp.h>
#include <alien/core/backend/IInternalLinearSolverT.h>
#include <alien/kernels/hpddm/linear_solver/HPDDMOptionTypes.h>
#include <alien/expression/solver/SolverStat.h>
#include <alien/core/backend/IInternalLinearSolverT.h>
#include <alien/utils/ObjectWithTrace.h>
#include <alien/kernels/simple_csr/SimpleCSRVector.h>
#include <alien/kernels/simple_csr/SimpleCSRMatrix.h>
#include <alien/AlienHPDDMPrecomp.h>

#include <alien/kernels/hpddm/linear_solver/ILinearSolverDDM.h>
#include <alien/kernels/hpddm/data_structure/HPDDMInternal.h>
#include <alien/kernels/hpddm/data_structure/HPDDMVector.h>
#include <alien/kernels/hpddm/data_structure/HPDDMMatrix.h>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
class IOptionsHPDDMSolver;

namespace Alien {


class ALIEN_HPDDM_EXPORT HPDDMInternalSolver
    //: public IInternalLinearSolver<SimpleCSRMatrix<Real>, SimpleCSRVector<Real> >
    : public ILinearSolverDDM,
      public ObjectWithTrace
{
 public:
  typedef SolverStatus Status;

  typedef SimpleCSRMatrix<Real> CSRMatrixType;
  typedef SimpleCSRVector<Real> CSRVectorType;
  typedef SimpleCSRInternal::MatrixInternal<Real> CSRInternalMatrixType;

  /** Constructeur de la classe */
  HPDDMInternalSolver(IMessagePassingMng* parallel_mng, IOptionsHPDDMSolver* options);

  /** Destructeur de la classe */
  virtual ~HPDDMInternalSolver() {}

 public:
  //! return package back end name
  String getBackEndName() const { return "hpddm"; }
  String getName() const { return "hpddm"; }

  void init();
  void init(int argc, char const** argv);

  //! Finalize
  void end();

  void updateParallelMng(IMessagePassingMng* pm) { m_parallel_mng = pm; }

  //! Indicateur de support de r�solution parall�le
  bool hasParallelSupport() const { return true; }

  //! Compatible linear algebra
  std::shared_ptr<Alien::ILinearAlgebra> algebra() const
  {
    return std::shared_ptr<Alien::ILinearAlgebra>();
  }

  //! Etat du solveur
  const Alien::ILinearSolver::Status& getStatus() const { return m_status; }

  const SolverStat& getSolverStat() const { return m_stat; }
  SolverStat& getSolverStat() { return m_stat; }

  bool solve(const Alien::IMatrix& A, const Alien::IVector& b, Alien::IVector& x);

  bool solve(const Alien::IMatrix& Ad, const Alien::IMatrix& An, const Alien::IVector& b,
      Alien::IVector& x);

  bool solve(const CSRMatrixType& A, const CSRVectorType& b, CSRVectorType& x);

  bool solve(const CSRMatrixType& Ad, const CSRMatrixType& An, const CSRVectorType& b,
      CSRVectorType& x);

  void setNullSpaceConstantOption(bool flag) {}

  void internalPrintInfo() const;

 private:
  void _computeHPDDMRhs(const CSRMatrixType& A, CSRVectorType const& b);
  void _computeHPDDMSol(const CSRMatrixType& A, CSRVectorType const& x);
  void _computeSol(CSRVectorType& x);

  IMessagePassingMng* m_parallel_mng = nullptr;
  IOptionsHPDDMSolver* m_options = nullptr;

  typedef HPDDMMatrix<Real>::MatrixInternal HPDDMMatrixType;
  typedef HPDDMMatrixType::HPDDMValueType HPDDMValueType;

  HPDDMMatrixType m_hpddm_matrix;
  std::vector<Real> m_hpddm_sol;
  std::vector<Real> m_hpddm_rhs;

  Alien::SolverStat m_stat; //<! Statistiques d'ex�cution du solveur
  Alien::SolverStater<HPDDMInternalSolver> m_stater;
  Alien::ILinearSolver::Status m_status;
  Real m_init_solver_time = 0.;
  Real m_iter_solver_time = 0.;
  Integer m_output_level = 0;
};
}

#endif
